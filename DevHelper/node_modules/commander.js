/**
 * =============================
 * 
 * Executes commands and daemons on the host.
 * 
 * =============================
 * 
 * Attributes : /
 *
 * Methods :
 *		- command(file, arguments)
 *		- daemon(command, arguments)
 * 
 * Events : /
 * 
 * =============================
 */



/**
 * Load modules
 */

// Built-in
var execFile = require('child_process').execFile;
var spawn = require('child_process').spawn;
var events = require('events');



/**
 * Execute a command specified by the given file
 * Args : full path, array of arguments
 */
	
var command = function (file, arguments) {
	// Start time
	var start = new Date().getTime();
	// Event emitter
	var eventEmitter = new events.EventEmitter();
	// Exec
	var exec = execFile(file, arguments, {uid: 0});
	var output = '';
	exec.stdout.on('data', function (data) {
		output += data;
	});
	exec.on('close', function (code) {
		var elapsed = new Date().getTime() - start;
		eventEmitter.emit('done', {code: code, data: new String(output), start: start, elapsed: elapsed});
	});
	return eventEmitter;
};



/**
 * Execute a daemon
 */

var daemon = function(command, arguments) {
	// Start time
	var start = new Date().getTime();
	// Event emitter
	var eventEmitter = new events.EventEmitter();
	// Exec
	var exec = spawn(command, arguments, {uid: 0});
	exec.stdout.on('data', function (data) {
		eventEmitter.emit('data', new String(data));
	});
	exec.on('close', function (code) {
		var elapsed = new Date().getTime() - start;
		if (code == 0) {
			eventEmitter.emit('done', {start: start, elapsed: elapsed});
		} else {
			eventEmitter.emit('error', {code: code, start: start, elapsed: elapsed});
		}
	});
	return eventEmitter;
}



/**
 * Exports
 */

// methods
exports.command = command;
exports.daemon = daemon;