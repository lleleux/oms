/**
 * =============================
 *
 * =============================
 *
 * Attributes : /
 *
 * Methods : /
 *
 * Events : /
 *
 * =============================
 */



/**
 * Load modules
 */

// Built-in
var events = require('events');
var os = require('os');
// Global
var logger = require('logger');
var config = require('config');
var commander = require('commander');
var Dao = require('db').Dao;



/**
 * Variables
 */

// DAO
var commands = new Dao('commands');
var scripts = new Dao('scripts');
var serverDao = new Dao('servers');



/**
 * Execute a command stored in DB
 */

var command = function (hostname, name, parameters, callback) {
	_command(false, hostname, name, parameters, callback);
};

var daemon = function (hostname, name, parameters, callback) {
	_command(true, hostname, name, parameters, callback);
};


var _command = function (isDaemon, hostname, name, parameters, callback) {
	// Find command in DB
	commands.findOne({name: name}, function (dbCommand) {
		//Check if command exists
		if (dbCommand === undefined || dbCommand === null) {
			logger.error('[MaintenanceCommander] Unable to find command "' + name + '" in DB');
			return;
		}
		// If it is a script
		if (dbCommand.script !== undefined) {
			// Check if script exists on server
			var filename = config.get('serverTmpDir') + 'scripts/' + dbCommand.script + '_' + dbCommand.version;
			command(hostname, 'exists', {path: filename}, function (result) {
				// Execute function
				var execute = function () {
					// Find ssh command in DB
					commands.findOne({name: 'ssh-command'}, function (sshCommand) {
						if (sshCommand === undefined || sshCommand === null) {
							throw new Error('[MaintenanceCommander] Unable to find command "ssh-command" in DB');
							return;
						}
						var sshParams = {
							key:		config.get('serverTmpDir') + 'key',
							username:	'oms',
							hostname:	hostname,
							command:	filename + ' ' + prepareString(dbCommand.arguments, parameters)
						};
						// Execute the command and callback the result
						var exec = commander.command({command: prepareBase64String(sshCommand.command, sshParams)});
						// Daemon ?
						if (isDaemon) {
							if (callback) callback(exec);
						} else {
							exec.on('done', function (result) {
								if (callback) callback(result);
							});
						}
					});
				};
				// If no script, copy it
				if (result.code != 0) {
					scripts.findOne({name: dbCommand.script}, function (dbScript) {
						command(hostname, 'create-file', {base64contents: dbScript.content, filename: filename}, function (result) {
							execute();
						})
					});
				}
				// Execute
				else {
					execute();
				}
			});
		} else {
			// Find ssh command in DB
			commands.findOne({name: 'ssh-command'}, function (sshCommand) {
				if (sshCommand === undefined || sshCommand === null) {
					throw new Error('[MaintenanceCommander] Unable to find command "ssh-command" in DB');
					return;
				}
				var sshParams = {
					key:		config.get('serverTmpDir') + 'key',
					username:	'oms',
					hostname:	hostname,
					command:	prepareString(dbCommand.command, parameters)
				};
				// Execute the command and callback the result
				var exec = commander.command({command: prepareBase64String(sshCommand.command, sshParams)});
				exec.on('done', function (result) {
					if (callback) callback(result);
				});
			});
		}
	});
};



/**
 * Prepare the string encoded in base 64 by replacing the {{}} by the parameters.
 * Returns a base64 encoded string.
 */
var prepareBase64String = function (encodedString, parameters) {
	var preparedString = prepareString(encodedString, parameters);
	preparedString = new Buffer(preparedString).toString('base64');
	return preparedString;
};

var prepareString = function (encodedString, parameters) {
	var preparedString = new Buffer(encodedString, 'base64').toString('utf-8');
	for (var parameter in parameters) {
		var regexp = new RegExp('{{' + parameter + '}}', 'g')
		preparedString = preparedString.replace(regexp, parameters[parameter]);
	}
	return preparedString;
};



/**
 * Exports
 */

// methods
exports.command = command;
exports.daemon = daemon;