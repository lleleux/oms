/**
 * =============================
 *
 * Manages all the applications to dev easily.
 *
 * =============================
 *
 * Attributes : /
 *
 * Methods : /
 *
 * Events : /
 *
 * =============================
 */



/**
 * Load modules
 */

// Built-in
var http = require('http');
var fs = require('fs');
var io = require('socket.io');
// Global
var commander = require('commander');
var dbCommander = require('dbCommander');
var db = require('db');
var config = require('config');
// Custom
var scriptsLoader = require('scriptsLoader');
var apiAnalyzer = require('apiAnalyzer');



/**
 * Variables
 */

var host = config.get('host');
var port = config.get('port');
// Pre-loaded frequently-user web-pages
var index = fs.readFileSync(__dirname + '/../frontend/index.html');
// Dao
var scriptsDao = new db.Dao('scripts');
var commandsDao = new db.Dao('commands');
var apiDocDao = new db.Dao('api', 'doc');
var serversDao = new db.Dao('servers');
var maintenanceCommander = require('maintenanceCommander');



/**
 * Initialize the WebServer
 */

var server = http.createServer(function (req, res) {
	if (req.url == '/') {
		req.url = '/index.html';
	}
	fs.readFile(__dirname + '/../frontend' + req.url, function (err, data) {
		if (err) {
			res.writeHead(404);
			res.write(index);
		} else {
			res.writeHead(200);
			res.write(data);
		}
		res.end();
	});
});



/**
 * Initialize Socket.io client socket
 */

var initClient = function (socket) {
	// Services
	socket.on('getServers', function () {
		_getStatus();
	});
	socket.on('stopServices', function (data) {
		_service('stop', data.hostname, data.services);
	});
	socket.on('startServices', function (data) {
		_service('start', data.hostname, data.services);
	});
	socket.on('restartServices', function (data) {
		_service('restart', data.hostname, data.services);
	});
	socket.on('getConsole', function (data) {
		_getLogs(data.hostname, data.serviceName);
	});

	// Scripts & commands
	socket.on('reloadScripts', function () {
		scriptsLoader.loadDirectory('/home/laurent/OMS/Sources/Scripts/');
	});
	socket.on('getCommands', function () {
		commandsDao.findAll(function (result) {
			socket.emit('commands', JSON.stringify(result));
		});
	});
	socket.on('getScripts', function () {
		scriptsDao.findAll(function (result) {
			socket.emit('scripts', JSON.stringify(result));
		});
	});

	// API
	socket.on('reloadApiDoc', function () {
		apiAnalyzer.analyze();
	});
	socket.on('getApiDoc', function () {
		apiDocDao.findAll(function (apis) {
			socket.emit('apiDoc', JSON.stringify(apis));
		});
	});
};



/**
 * General methods executing commands
 */

// Execute oms service commands
var _service = function (commandName, hostname, services) {
	maintenanceCommander.command(hostname, commandName + '-services', {services: services.join(' ')}, function (result) {
		_getStatus();
	});
};

// Get the last 30 logs of a service
var _getLogs = function (hostname, service) {
	var logfiles = {
		'oms-api':				'/var/log/oms/api.log',
		'oms-dev-helper':		'/var/log/oms/dev-helper.log',
		'oms-agent-manager':	'/var/log/oms/agent-manager.log',
		'oms-admin-panel':		'/var/log/oms/admin-panel.log'
	};
	maintenanceCommander.command(hostname, 'get-logs', {lines: 30, filename: logfiles[service]}, function (result) {
		io.sockets.emit('console', hostname, service, result.data);
	});
};

var _getStatus = function () {
	serversDao.findAll(function (result) {
		io.sockets.emit('servers', result);
	});
}



/**
 * Start
 */

var start = function () {
	// Start webserver
	server.listen(port, host);

	// Socket IO
	io = io.listen(server, { log: false });
	io.set('log level', 1);

	// Socket IO handlers
	io.sockets.on('connection', function (socket) {
		console.log('new connection !');
		initClient(socket);
	});

	// Send oms-status every 2 seconds
	setInterval(_getStatus, 2000);
};



/**
 * Stop
 */

var stop = function(callback) {
	server.close(callback);
};



/**
 * Exports
 */

// Methods
exports.start = start;
exports.stop = stop;