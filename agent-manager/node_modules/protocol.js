/**
 * =============================
 *
 * Manages the communication between the agents and the server.
 * Abstracts the protocol (XML, JSON...)
 *
 * Handle the messages when received.
 *
 * =============================
 *
 * Attributes : /
 *
 * Methods :
 * 		- sendCommand(agent)
 *
 * Events : /
 *
 * =============================
 */



/**
 * Load modules
 */

// Built-in
var fs = require('fs');
var events = require('events');
// Global
var config = require('config');
var logger = require('logger');
var db = require('db');
var Dao = db.Dao;
// Custom
var connection = require('connection');



/**
 * Variables
 */

var devices = new Dao('devices');
var installs = new Dao('installs');



/**
 * When a new message is received,
 *
 * Generic method to handle protocol messages.
 * This method is generic and forward the request to a Handler.
 */

connection.on('message', function (message, agentId) {
	logger.info("[Protocol] Message received: " + message);
	message = JSON.parse(message);
	name = message.name.charAt(0).toUpperCase() + message.name.slice(1);
	// Call the right handler method, if not found, call the unknownMessage method
	if (handler['handle' + name] !== undefined) {
		logger.info('[Protocol] Handle ' + message.name);
		handler['handle' + name](message, agentId);
	} else {
		handler.handleUnknownMessage(message);
	}
});



/**
 * Send methods
 */

 var sendPairingResponse = function (agentId, code) {
	var message = {};
	message.name = 'pairingResponse';
	message.returnCode = code;
	send(message, agentId);
 };

var sendCommand = function (agentId, command) {
	var message = {};
	message.name = 'command';
	message.requestId = 1;
	message.command = new Buffer(command).toString('base64');
	send(message, agentId);
};

var sendScript = function (agentId, name, version, arguments) {
	var message = {};
	message.name = 'script';
	message.requestId = 2;
	message.scriptName = name;
	message.version = version;
	message.arguments =  arguments;
	send(message, agentId);
};



/**
 * Handler to handle the protocol messages
 */

var Handler = function () {

	this.handlePairingRequest = function (message, agentId) {
		devices.findOne({agent: {_id: agentId}}, function (device) {
			// If device found, send PAIRED
			if (device) {
				sendPairingResponse(agentId, 0);
			}
			// If device not found, set the activation time if not set, and send WAITING
			else {
				installs.findById(agentId, function (install) {
					if (!install.activation) {
						installs.update(agentId, {activation: new Date().getTime()});
						installs._update({_id: new db.BSON.ObjectID(new String(agentId))}, {$unset: {private_key: 1}});
					}
				});
				sendPairingResponse(agentId, 1);
			}
		});
	};

	this.handleResult = function (message, agentId) {
		// TODO store in database
	}

	this.handleUnknownMessage = function (message) {
		logger.warn('[Protocol] Unknown message received : ' + message);
	};

};

var handler = new Handler();



/**
 * Raw methods
 */

var send = function (message, agentId) {
 	logger.info('[Protocol] Sending ' + message.name);
	message.sendDate = new Date().getTime();
	connection.send(JSON.stringify(message), agentId);
};



/**
 * Exports
 */

// methods
exports.sendCommand = sendCommand;