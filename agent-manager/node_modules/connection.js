/**
 * =============================
 *
 * Manages the connections to the agents. Abstract the connection,
 * sending data, receiving data...
 *
 * Binding : TLS Socket
 *
 * =============================
 *
 * Attributes :
 *      - server
 *          - host
 *          - port
 *          - tlsPrivateKey
 *          - tlsCertificate
 *          - tlsCACertificate
 *          - requestCertificate
 *          - rejectUnauthorized
 *      - agents[agentId]
 *          - host
 *          - port
 *          - stream
 *          - connectionDate
 *
 * Methods :
 *      - listen
 *      - send(message, agent)
 *
 * Events :
 *      - message(data, agent)
 *
 * =============================
 */



/**
 * Load modules
 */

// Built-in
var tls = require('tls');
var fs = require('fs');
var events = require('events');
// Global
var config = require('config');
var logger = require('logger');



/**
 * Variables
 */

// Configuration
var server = {
	host:                   config.host,
	port:                   config.port,
	tlsCrl:					config.tlsCrl,
	tlsPrivateKey:          config.tlsPrivateKey,
	tlsCertificate:         config.tlsCertificate,
	tlsCACertificate:       config.tlsCACertificate,
	requestCertificate:     true,
	rejectUnauthorized:     true
};
var encoding = config.encoding;

// Server options
options = {
	key:                    server.tlsPrivateKey,
	cert:                   server.tlsCertificate,
	ca:                     server.tlsCACertificate,
	requestCert:            server.requestCertificate,
	rejectUnauthorized:     server.rejectUnauthorized,
	crl: 					server.tlsCrl
};

// Agents (host, port, stream, connectionDate)
var agents = {};

// Event emitter
var eventEmitter = new events.EventEmitter();



/**
 * Create a server listening to new TCP connections from agents.
 */

// Server
var TLSServer = tls.createServer(options);

// When a new connection is opened
TLSServer.on('secureConnection', function (stream) {
	// Reject unauthorized connections
	if (!stream.authorized) {
		logger.info('[Connection] Unauthorized connection from ' + stream.remoteAddress +':'+ stream.remotePort + ' rejected');
		stream.close();
		return;
	}
	// Logging
	logger.info('[Connection] Authorised connection from ' + stream.remoteAddress +':'+ stream.remotePort + ' accepted');
	// Configure the stream
	stream.setEncoding(encoding);
	// Get the agentId
	var agentId = stream.getPeerCertificate().subject.CN;
	logger.info("AgentId: " + agentId);
	// Save agent
	agents[agentId] = {
		host: stream.remoteAddress,
		port: stream.remotePort,
		stream: stream,
		connectionDate: new Date().getTime(),
	};
	// Set handlers
	setHandlers(stream, agentId);
});

// When an error occurs before the client connection is established
TLSServer.on('clientError', function (exception) {
	logger.warn('[Connection] Cannot establish a client connection ! ' + exception);
});


// When the server is closed
TLSServer.on('close', function () {
	logger.warn('[Connection] Server stopped !');
});

// When the server is listening
TLSServer.on('listening', function () {
	logger.info('[Connection] Listening on ' + server.host +':'+ server.port + '.');
});



/**
 * Set handlers on the stream
 */

var setHandlers = function(stream, agentId) {

	// New data
	stream.on('data', function(data) {
		eventEmitter.emit('message', data, agentId);
	});

	// Client end the connection
	stream.on('end', function(exception) {
		logger.warn('[Connection] Agent closed the connection !');
	});

	// Error
	stream.on('error', function(exception) {
		logger.warn('[Connection] Error with agent ' + agents[agentId].host + ':' + agents[agentId].port + ' : ' + exception);
	});

	// Close
	stream.on('close', function(had_error) {
		logger.warn('[Connection] Connection closed with agent ' + agents[agentId].host + ':' + agents[agentId].port);
		delete agents[agentId];
	});

};



/**
 * Listen to new connections;
 */

var listen = function () {
	TLSServer.listen(server.port, server.host);
};



/**
 * Close the server
 */

var close = function (callback) {
	if (TLSServer !== undefined && typeof TLSServer.close == 'function') {
		TLSServer.close(function () {
			logger.info('[Connection] No more listening on ' + server.host + ':' + server.port);
			if (callback) callback();
		});
	} else {
		logger.info('[Connection] Cannot stop listening');
		if (callback) callback();
	}
}



/**
 * Send a message
 */

var send = function (message, agentId) {
	agents[agentId].stream.write(message);
};



/**
 * Exports
 */

// events
exports = module.exports = eventEmitter;
// attributes
exports.server = server;
exports.agents = agents;
// methods
exports.listen = listen;
exports.close = close;
exports.send = send;