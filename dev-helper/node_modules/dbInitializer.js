/**
 * =============================
 *
 * Description
 *
 * =============================
 *
 * Attributes : /
 *
 * Methods : /
 *
 * Events : /
 *
 * =============================
 */



/**
 * Load modules
 */

// Global
var logger = require('logger');
var db = require('db');



/**
 * Variables
 */

var neededCollections = ['servers', 'config', 'scripts', 'commands', 'installs', 'devices'];



var checkConnection = function (dbHost, dbPort, omsDb, callback) {
	logger.info('[DB Initializer] Connection check on server: ' + dbHost + ':' + dbPort + '/' + omsDb);
	db.open(dbHost, dbPort, omsDb, omsDb, function (err) {
		if (err) {
			logger.info('[DB Initializer] Connection check failed: ' + err.message);
			if (callback) callback (new Error('[DB Initializer] Connection problem with database: ' + err.message));
		} else {
			logger.info('[DB Initializer] Connection check passed');
			if (callback) callback (null);
		}
	});
};

var checkConfigCollection = function (omsDb, callback) {
	_getCollections(config,omsDb, function (err, collections) {
		// If error during
		if (err) {
			callback(err);
			return;
		}
		// Check if all the collections are created
		for (var key in neededCollections) {
			if (collections.indexOf(neededCollections[key]) === -1) {
				logger.info('[DB Initializer] Initialization check failed: "' + neededCollections[key] + '" collection not present');
				if (callback) callback (new Error('[DB Initializer] Initialization check failed: "' + neededCollections[key] + '" collection not present'));
				return;
			}
		}
		logger.info('[DB Initializer] Initialization check passed');
		if (callback) callback(null);
	});
};

var _getCollections = function (checkName, omsDb, callback) {
	logger.info('[DB Initializer] ' + checkName + ' check on database: ' + omsDb);
	var connection = db._getConnection(omsDb);
	connection.collectionNames(function (err, collections) {
		// If unable to get collections information
		if (err) {
			logger.info('[DB Initializer] ' + checkName + ' check failed: ' + err.message);
			if (callback) callback (new Error('[DB Initializer] ' + checkName + ' problem with database: ' + err.message));
		}
		// If collections information got
		else {
			// Remove unecessary data, like other properties and the 'oms.' prefix
			for (var key in collections) {
				collections[key] = collections[key].name.slice(collections[key].name.indexOf('.') + 1);
			}
			if (callback) callback(collections)
		}
	});
}


/**
 * Exports
 */

exports.checkConnection = checkConnection;
exports.checkInitialized = checkInitialized;