/**
 * =============================
 *
 * Description
 *
 * =============================
 *
 * Attributes : /
 *
 * Methods : /
 *
 * Events : /
 *
 * =============================
 */



/**
 * Load modules
 */

// Built-in
var fs = require('fs');
// Global
var logger = require('logger');
var db = require('db');
var utils = require('utils');



/**
 * Variables
 */

var commands = new db.Dao('commands');
var scripts = new db.Dao('scripts');



/**
 * Load all the command/script files in the given directory
 */

var loadDirectory = function (path) {
	logger.info('[Scripts Loader] Loading scripts from: ' + path);
	fs.readdir(path, function (err, files) {
		if (err) {
			logger.error(new Error('[Scripts Loader] Unable to read directory "' + path + '": ' + err.message));
			return;
		}
		var commands = /^.*\.commands$/;
		var script = /^.*\.script$/;
		files.forEach(function (file) {
			if (script.test(file)) {
				_loadScriptFile(path + file);
			} else if (commands.test(file)) {
				_loadCommandFile(path + file);
			}
		});
	});
}



/**
 * Load a command file and insert it in the commands collection.
 */

var _loadCommandFile = function (filename) {
	logger.info('[Scripts Loader] Start loading commands file: ' + filename);
	// Read filename for type (script/module) and version
	var regex = /^.*[\\\/]([^\\\/]*)_(\d(?:\.\d)*)\.commands$/g;
	var split = regex.exec(filename);
	var script, version, module;
	if (split != null) {
		script = split[1];
		version = split[2];
	} else {
		regex = /^.*[\\\/]([^\\\/]*)\.commands$/g;
		split = regex.exec(filename);
		module = split[1];
	}
	// Read file content
	fileContents = fs.readFileSync(filename, 'UTF-8');
	// Populate commands to insert
	var commandsToInsert = [];
	fileContents.split('\n').forEach(function (line) {
		var split = line.split('=');
		// If the line is of type 'key=value' and starts not with a '#'. The join is used because the value can have '=' characters
		var key = split.shift().trim();
		var value = split.join('=').trim();
		if (key.length > 0 && key.charAt(0) != '#' && value.length > 0) {
			// If script command
			var command;
			if (script === undefined) {
				command = {
					name:		key,
					command:	new Buffer(value).toString('base64'),
					module:		module
				};
			}
			// If module command
			else {
				command = {
					name:		key,
					arguments:	new Buffer(value).toString('base64'),
					script:		script,
					version:	version
				};
			}
			// Push command to insert
			commandsToInsert.push(command);
		}
	});
	// Remove old commands and then insert
	var selector = script !== undefined ? {script: script} : {module: module};
	commands._remove(selector, {}, function (err, result) {
		commands.insert(commandsToInsert, function (err, result) {
			logger.info('[Scripts Loader] Commands file ' + filename + ' loaded');
		});
	});
};



/**
 * Load a script in DB.
 * If the script already exists in DB, update it only if
 * he is outdated (version outdated).
 *
 * @param filename the filename of the script to load
 */

var _loadScriptFile = function (filename) {
	logger.info('[Scripts Loader] Start loading script file: ' + filename);
	var regex = /^.*[\\\/]([^\\\/]*)_(\d(?:\.\d)*)\.script$/g;
	var split = regex.exec(filename);
	var name = split[1];
	var version = split[2];
	// Search the script in DB
	scripts.findOne({name: name}, function (err, script) {
		// If there is a script in DB
		if (script) {
			// Compare versions
			var comparison = utils.compareVersions(script.version, version);
			if (comparison instanceof Error) {
				logger.error('[Scripts Loader] Unable to compare script version numbers (' + script.version + '|' + version + '): ' + comparison.message);
				return;
			}
			// If script outdated
			if (comparison < 0) {
				fs.readFile(filename, function (err, content) {
					if (err) {
						logger.error('[Scripts Loader] Unable to read script file ' + filename + ', error: ' + err.message);
						return;
					}
					scripts.update(script._id, {version: version, content: content.toString('utf-8')}, function () {
						logger.info('[Scripts Loader] Script file ' + filename + ' loaded (updated)');
					});
				});
			}
			// If script up to date in DB
			else {
				logger.info('[Scripts Loader] Script up to date in DB');
			}
		}
		// If there is no script in DB
		else {
			fs.readFile(filename, function (err, content) {
				content = new Buffer(content).toString('base64');
				if (err) {
					logger.error('[Scripts Loader] Unable to read script file ' + filename + ', error: ' + err.message);
					return;
				}
				scripts.insert({name: name, version: version, content: content}, function (err, result) {
					if (result == 1) {
						logger.info('[Scripts Loader] Script file ' + filename + ' loaded (inserted)');
					} else {
						logger.warn('[Scripts Loader] Unable to load script file ' + filename + ', error during insertion id db');
					}
				});
			});
		}
	});
};



/**
 * Exports
 */

exports.loadDirectory = loadDirectory;