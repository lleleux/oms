/**
 * Load modules
 */

// Built-in
var fs = require('fs');
var async = require('async');
// Global
var logger = require('logger');
var dbCommander = require('dbCommander');
var config = require('config');
var utils = require('utils');
var db = require('db');



/**
 * Variables
 */

var configDao = new db.Dao('config');



/**
 * Generate new installers
 */

var generate = function (callback) {
	logger.info('[Installer Generator] Start installers generation');

	var installPath = config.serviceTmpDir + config.installersDir;
	var sourcesPath = config.serviceTmpDir + config.installersDir + 'sources/';
	// Clean installers directory
	if (fs.existsSync(installPath)) {
		utils.rmdirrfSync(installPath);
	}
	// Create directories
	fs.mkdirSync(installPath);
	fs.mkdirSync(sourcesPath);
	// Get sources
	_getSources(sourcesPath, function () {
		configDao.findOne({name: 'installers'}, function (installers) {
			// List installers to generate
			var toGenerate = [];
			for (var i in installers.debian) {
				toGenerate.push(installers.debian[i]);
			}
			// Generate function
			var generateOne = function (infos, callback) {
				infos.sourcesDir = sourcesPath;
				infos.installersDir = installPath;
				dbCommander.command('create-service-installer', infos, function (result) {
					logger.info('[Installer Generator] "' + infos.name + '" installer generated');
				});
			};
			// Generate all
			async.eachSeries(toGenerate, generateOne, function (err) {
				utils.rmdirrfSync(sourcesPath);
				if (err) {
					throw err
				} else {
					logger.info('[Installer Generator] All installers are generated');
					if (callback) callback();
				}
			});
		});
	});
};



/**
 * Get the source-code
 */

var _getSources = function (path, callback) {
	// Get git configuration
	configDao.findOne({name: 'git'}, function (git) {
		// Create URL
		var url = git.url.replace('://', '://' + git.user + ':' + git.password + '@');
		// Start retrieving sources
		var parameters = {
			url:			url,
			destination:	path
		};
		dbCommander.command('git-clone', parameters, function (result) {
			if (callback) callback();
		});
	});
};



/**
 * Exports
 */

// Methods
exports.generate = generate;