/**
 * =============================
 *
 * Manages all the applications to dev easily.
 *
 * =============================
 *
 * Attributes : /
 *
 * Methods : /
 *
 * Events : /
 *
 * =============================
 */



/**
 * Load modules
 */

// Built-in
var fs = require('fs');
var express = require('express');
var io = require('socket.io');
// Global
var db = require('db');
var config = require('config');
var logger = require('logger');
// Custom
var serverRoutes = require('../routes/server.js');
var serviceRoutes = require('../routes/service.js');
var docRoutes = require('../routes/doc.js');
var installerRoutes = require('../routes/installer.js');
var commandRoutes = require('../routes/command.js');
var scriptRoutes = require('../routes/script.js');



/**
 * Variables
 */

var host = config.host;
var port = config.port;
// Pre-loaded frequently-user web-pages
var index = fs.readFileSync(__dirname + '/../frontend/index.html');
// Dao
var scriptsDao = new db.Dao('scripts');
var commandsDao = new db.Dao('commands');
var serversDao = new db.Dao('servers');



/**
 * Initialize the WebServer
 */

// Create server
var server = express();

// Logging
server.use(express.logger('dev'));
server.use(express.bodyParser());

// Templating
server.get('/js/app.js', function(req, res) {
	var hostname = config.publicHost ? config.publicHost : config.server;
	var contents = fs.readFileSync(__dirname + '/../frontend/js/app.js').toString();
	contents = contents.replace(/{{hostname}}/g, hostname);
	contents = contents.replace(/{{port}}/g, config.port);
	res.set('Content-Type', 'application/javascript');
	res.send(contents);
});
// Static JS/Images...
server.use(express.static(__dirname + '/../frontend'));
// Static intallers files
server.use('/files/installers', express.static(config.serviceTmpDir + config.installersDir));

// Server
server.get('/api/server', serverRoutes.findAll);
server.delete('/api/server/:id', serverRoutes.remove);
server.get('/api/server/:id/config/:key', serverRoutes.getConfig);
server.post('/api/server/:id/config/:key', serverRoutes.setConfig);
server.delete('/api/server/:id/config/:key', serverRoutes.removeConfig);
server.put('/api/server/:id/config/:key', serverRoutes.addConfig);
// Service
server.delete('/api/server/:id/service/:name', serviceRoutes.remove);
server.get('/api/server/:id/service/:name/logs', serviceRoutes.getLogs);
server.post('/api/server/:id/service/:name/start', serviceRoutes.start);
server.post('/api/server/:id/service/:name/stop', serviceRoutes.stop);
server.post('/api/server/:id/service/:name/restart', serviceRoutes.restart);
server.get('/api/server/:id/service/:name/config/:key', serviceRoutes.getConfig);
server.post('/api/server/:id/service/:name/config/:key', serviceRoutes.setConfig);
server.delete('/api/server/:id/service/:name/config/:key', serviceRoutes.removeConfig);
server.put('/api/server/:id/service/:name/config/:key', serviceRoutes.addConfig);
// API Documentation
server.get('/api/doc/api', docRoutes.findAllApi);
server.get('/api/doc/dev-helper', docRoutes.findAllDevHelper);
server.post('/api/doc/reload', docRoutes.reload);
// Installers
server.get('/api/installer', installerRoutes.findAll);
server.post('/api/installer/generate', installerRoutes.generate);
// Commands
server.get('/api/command', commandRoutes.findAll);
server.get('/api/command/:id', commandRoutes.findById);
server.post('/api/command', commandRoutes.insert);
server.put('/api/command/:id', commandRoutes.update);
server.delete('/api/command/:id', commandRoutes.remove);
server.post('/api/command/reload', commandRoutes.reload);
// Scripts
server.get('/api/script', scriptRoutes.findAll);
server.get('/api/script/:id', scriptRoutes.findById);
server.post('/api/script', scriptRoutes.insert);
server.put('/api/script/:id', scriptRoutes.update);
server.delete('/api/script/:id', scriptRoutes.remove);

// Default route
server.use(function(req, res, next) {
	res.set('Content-Type', 'text/html');
	res.send(index);
});



/**
 * Start the webserver listening for:
 *		- Frontend
 *		- REST API
 *		- Socket.io API
 */
var start = function () {
	// Start webserver
	server = server.listen(port, host);

	// Socket IO
	io = io.listen(server, { log: false });
	io.set('log level', 1);
	io.sockets.on('connection', function (socket) {
		_initClient(socket);
	});
};

/**
 * Stop the webserver listening
 */
var stop = function(callback) {
	server.close(callback);
};

/**
 * Initialize Socket.io client socket
 * This method generally set listeners for some
 * messages on the socket.
 */
var _initClient = function (socket) {
	//socket.on('getConsole', function (data) {
	//	_getLogs(data.hostname, data.serviceName);
	//});
};



/**
 * Exports
 */

// Methods
exports.start = start;
exports.stop = stop;