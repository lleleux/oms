/**
 * =============================
 *
 *
 *
 * =============================
 *
 * Attributes : /
 *
 * Methods : /
 *
 * Events : /
 *
 * =============================
 */



/**
 * Load modules
 */

// Built-in
var fs  = require('fs');
var os = require('os');
var async = require('async');
// Global
var logger = require('logger');
var config = require('config');
var db = require('db');
// Custom
var registration = require('./bootstrap/registration');



/**
 * Variables
 */

// The config found in the bootstrap file
var bootstrapConfig;
// An array of files that will be used to find the bootstrap.properties file
var files = ['/etc/oms/bootstrap.properties'];

// Application gracefull exit method
var appGracefulExit;



/**
 * Bootstrap the Server. Opens database connections, set exit handlers...
 *
 * @param service the oms application identifier (api/dev-helper/agent-manager/admin-panel)
 * @param serviceGracefulExitCallback The application gracefull exit callback, a function called before exiting
 * the server, he must close all the ressources an call a callback ! the execution time may not exceed 5 seconds...
 * @param callback a callback executed after the bootstrap is ended. No error is given, the errors are thrown.
 */
var bootstrap = function (service, serviceGracefulExitCallback, callback) {
	// Set the service gracefull exit callback
	appGracefulExit = serviceGracefulExitCallback;
	// Set gracefull exit handler
	process.on('SIGTERM', _gracefulExit);
	process.on('SIGINT', _gracefulExit);
	process.on('uncaughtException', _gracefulExit);
	// Open the databases
	var tasks = [
		// Load bootstrap config file
		function (serieCallback) { _loadConfig(serieCallback); },
		// Open database connections
		function (serieCallback) { db.open(bootstrapConfig.dbHost, bootstrapConfig.dbPort, [bootstrapConfig.omsDB, bootstrapConfig.docDB], bootstrapConfig.omsDB, serieCallback); },
		// Register service in DB
		function (serieCallback) { registration.register(service, serieCallback); },
		// Load configuration from DB
		function (serieCallback) { config.load(os.hostname(), service, serieCallback); },
		// Bootstrap the service
		function (serieCallback) { _bootstrapService(serieCallback); },
	];
	// Execute tasks
	async.series(tasks, function (err) {
		if (err) {
			throw new Error('[Bootstrap] Unable to bootstrap the service "' + service + '": ' + err.message);
		} else {
			if (callback) callback(null);
		}
	});
};

/**
 * Load bootstrap configuration (DB connection info) found in
 * the bootstrap.properties file.
 *
 * @param callback return an error or null
 */
var _loadConfig = function (callback) {
	// Search config file
	var file;
	for (key in files) {
		if (fs.existsSync(files[key])) {
			file = files[key];
			break;
		}
	}
	// If no config file found
	if (file === undefined) {
		if (callback) callback(new Error('[Bootstrap] No config file found in the following places: ' + files));
		return;
	}

	// Start loading config
	logger.info('[Bootstrap] Start loading config file: ' + file);
	// Read file content
	var fileContents = fs.readFileSync(file, 'UTF-8');
	// Populate config
	bootstrapConfig = {};
	fileContents.split('\n').forEach(function (line) {
		var split = line.split('=');
		// If the line is of type 'key=value' and starts not with a '#'
		if (split.length == 2 && split[0].charAt(0) != '#' && split[0].length > 0 && split[1].length > 0) {
			bootstrapConfig[split[0].trim()] = split[1].trim();
		}
	});
	logger.info('[Bootstrap] Config file ' + file + ' loaded');
	if (callback) callback(null);
};



/**
 * Exports
 */

// Methods
exports.bootstrap = bootstrap;