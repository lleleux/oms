/**
 * =============================
 *
 * Executes commands and scripts on the agent.
 *
 * This module abstracts totally the management of
 * the scripts, versions...
 * Only the script name and the parameters are needed.
 *
 * The parameters must be of the type : {key: value, ...}
 * In the command or script arguments, the parameters
 * can be set with mustaches: {{key}}
 * This templating works only with de commands and script
 * arguments. Not in the script contents.
 *
 * =============================
 *
 * Attributes : /
 *
 * Methods :
 *		- command(name, parameters, [callback])
 *
 * Events : /
 *
 * =============================
 */



/**
 * Load modules
 */

// Global
var logger = require('logger');
var config = require('config');
var Dao = require('db').Dao;
// Custom
var protocol = require('protocol');



/**
 * Variables
 */

// DAO
var agentManagerMessages = new Dao('agentManagerMessages');
var commands = new Dao('commands');
var scripts = new Dao('scripts');



/**
 * Listen to new commands from the API
 */

var listen = function () {
	agentManagerMessages.listen(function(message) {
		logger.info('[agentCommander] New message received from API : ' + JSON.stringify(message));
		// Find command in DB
		commands.findOne({name: message.command}, function (dbCommand) {
			// Check if command exists
			if (dbCommand == null) {
				logger.warn('[agentCommander] Unknown command received from API : ' + message.command);
				agentManagerMessages.update(message._id, {status: 'err'});
				return;
			}
			// If it is a script find it and send it to the agent
			if (dbCommand.script !== undefined) {
				scripts.findOne({name: dbCommand.script}, function(dbScript) {
					protocol.sendCommand(message.device, dbScript.scriptName, dbScript.version, prepareBase64String(dbCommand.arguments, message.parameters));
					logger.info('[agentCommander] Script sent to agent');	// TODO update message status in DB
					agentManagerMessages.update(message._id, {status: 'sta'});
				});
			}
			// If it is a command, send the command to the agent
			else {
				protocol.sendCommand(message.device, prepareBase64String(dbCommand.command, message.parameters));
				logger.info('[agentCommander] Command send to agent');	// TODO update message status in DB
				agentManagerMessages.update(message._id, {status: 'sta'});
			}
		});
	});
};



/**
 * Prepare the string encoded in base 64 by replacing the {{}} by the parameters.
 * Returns a base64 encoded string.
 */
var prepareBase64String = function (string, parameters) {
	var preparedString = new Buffer(string, 'base64').toString('ascii');
	for (var parameter in parameters) {
		var regexp = new RegExp('{{' + parameter + '}}', 'g')
		preparedString = preparedString.replace(regexp, parameters[parameter]);
	}
	preparedString = new Buffer(preparedString).toString('base64');
	return preparedString;
};



/**
 * Exports
 */

// methods
exports.listen = listen;