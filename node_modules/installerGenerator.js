/**
 * =============================
 *
 * Manage the installers for the OMS application.
 * This module can generate installers, get sources
 * from a git repository, return a list of installers
 * currently generated...
 *
 * =============================
 *
 * Attributes : /
 *
 * Methods :
 *		- generateServices([callback])
 *		- getInstallers()
 *
 * Events : /
 *
 * =============================
 */



/**
 * Load modules
 */

// Built-in
var fs = require('fs');
var async = require('async');
// Global
var logger = require('logger');
var dbCommander = require('dbCommander');
var config = require('config');
var utils = require('utils');
var db = require('db');



/**
 * Variables
 */

var installPath = config.serviceTmpDir + config.installersDir;
var sourcesPath = config.serviceTmpDir + config.installersDir + 'sources/';
// Dao
var configDao = new db.Dao('config');
var installDao = new db.Dao('installs');



/**
 * Create directories
 */
// Installers
if (!fs.existsSync(installPath)) {
	fs.mkdirSync(installPath);
}
// Sources
if (!fs.existsSync(sourcesPath)) {
	fs.mkdirSync(sourcesPath);
}



/**
 * Generate installers for the OMS app services.
 * This method get the sources from git and generate
 * the debian packages.
 *
 * @param callback called when done, return err or null
 */

var generateServices = function (callback) {
	logger.info('[Installer Generator] Start installers generation');
	// Get sources
	_getSources(function (err) {
		// If error
		if (err) {
			if (callback) callback(new Error('[Installer Generator] Unable to retrieve sources to create installers: ' + err.message));
			return;
		}
		// Get installers configuration
		configDao.findOne({name: 'installers'}, function (installers) {
			// List installers to generate
			var toGenerate = [];
			for (var i in installers.debian) {
				if (installers.debian[i].name != 'oms-agent') {
					toGenerate.push(installers.debian[i]);
				}
			}
			// Generate all
			async.eachSeries(toGenerate, _generateOne, function (err) {
				if (err) {
					if (callback) callback(new Error('[Installer Generator] Unable to create services installers: ' + err.message));
				} else {
					logger.info('[Installer Generator] All installers are generated');
					if (callback) callback(null);
				}
			});
		});
	});
};



/**
 * Generate installer for an agent. The installer
 * contains the certificate and key to connect to
 * the agent-manager.
 *
 * @param agentId the agent id
 * @param callback called when done, return err or null
 */

var generateAgent = function(agentId, callback) {
	logger.info('[Installer Generator] Start installer generation for agent ' + agentId);
	// Get sources
	_getSources(function (err) {
		// If error
		if (err) {
			if (callback) callback(new Error('[Installer Generator] Unable to retrieve sources to create agent installer: ' + err.message));
			return;
		}
		// Get installers configuration
		configDao.findOne({name: 'installers'}, function (installers) {
			// Get agent information
			installDao.findById(agentId, function (agent) {
				if (agent) {
					// Add cert/key
					console.log('A: ' + JSON.stringify(installers));
					installers.debian['oms-agent'].key = agent.private_key;
					installers.debian['oms-agent'].certificate = agent.certificate;
					console.log('B: ' + JSON.stringify(installers));
					// Generate installer
					_generateOne(installers.debian['oms-agent'], function (err) {
						if (callback) {
							if (err) callback(new Error('[Installer Generator] Unable to generate installer for agent ' + agentId + ': ' + err.message));
							else callback(null);
						}
					});
				} else {
					if (callback) callback(new Error('[Installer Generator] Unable find information in DB for agent ' + agentId));
				}
			});
		});
	});
};



/**
 * Get the source-code from git and put it in
 * a given sources directory.
 *
 * @param callback return an error or null
 */

var _getSources = function (callback) {
	// Get git configuration
	configDao.findOne({name: 'git'}, function (git) {
		// Create URL
		var url = git.url.replace('://', '://' + git.user + ':' + git.password + '@');
		// Start retrieving sources
		var parameters = {
			url:			url,
			destination:	sourcesPath
		};
		dbCommander.command('git-clone', parameters, function (result) {
			if (result.code === 0) {
				logger.info('[Installer Generator] Sources got from git');
				if (callback) callback(null);
			} else {
				if (callback) callback(new Error('Error during git clone command'));
			}
		});
	});
};



/**
 * Generate an installer with the given infos.
 * The infos will be given to the generation command,
 * but sources and installers directories will be given
 * manually by the method.
 *
 * @param infos an object with the infos for the generation command
 * @param callback return an error or null
 */

var _generateOne = function (infos, callback) {
	infos.sourcesDir = sourcesPath;
	infos.installersDir = installPath;
	dbCommander.command('create-service-installer', infos, function (result) {
		if (result.code === 0) {
			logger.info('[Installer Generator] "' + infos.name + '" installer generated');
			if (callback) callback(null);
		} else {
			if (callback) callback(new Error('Unable to create installer for ' + infos.name + ' service'));
		}
	});
};



/**
 * Returns an array of all the availlable installers.
 * Example: [ {
 *		url:		'/files/installers/oms-api_0.0.1.deb',
 *		service:	'Developement Helper',
 *		version:	'0.0.1',
 *		date:		'19/05/1988'
 * } ]
 */

var getInstallers = function () {
	var installers = [];
	var installPath = config.serviceTmpDir + config.installersDir;
	if (!fs.existsSync(installPath)) {
		return [];
	}
	// Read directory
	var files = fs.readdirSync(installPath);
	for (var key in files) {
		var regex = new RegExp('^(.*)_((?:\d|\.)*)\.deb$');
		// If it is an installer file
		if (regex.test(files[key])) {
			var infos = regex.exec(files[key]);
			var installer = {
				url:			'files/installers/' + files[key],
				service:		infos[1],
				version:		infos[2],
				date:			fs.statSync(installPath + files[key]).ctime.getTime()
			};
			installers.push(installer);

		}
	}
	return installers;
};



/**
 * Exports
 */

// Methods
exports.generateServices = generateServices;
exports.generateAgent = generateAgent;
exports.getInstallers = getInstallers;