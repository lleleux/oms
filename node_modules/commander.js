/**
 * =============================
 *
 * Executes commands and scripts on the host.
 * This module manages also the scripts directory
 * and versions.
 *
 * =============================
 *
 * Attributes : /
 *
 * Methods :
 *		- command(command)
 *		- script(script)
 *		- isScriptLocal(name, version)
 *		- addScript(name, version, script, callback)
 *
 * Events : /
 *
 * =============================
 */



/**
 * Load modules
 */

// Built-in
var execFile = require('child_process').execFile;
var exec = require('child_process').exec;
var events = require('events');
var fs = require('fs');
var utils = require('utils');
// Global
var logger = require('logger');
var config = require('config');



/**
 * Variables
 */
var scriptsDir;
var versions = {};



/**
 * Initialize scripts directory
 */

// Get scripts directory
scriptsDir = config.get('tmpDir') + config.get('scriptsDir');
// Create directory if needed
if (!fs.existsSync(scriptsDir)) {
	logger.info('[Commander] Creating scripts directory : ' + scriptsDir);
	utils.mkdirpSync(scriptsDir);
}
// Get versions
logger.info('[Commander] Loading scripts versions in ' + scriptsDir);
var fileNames = fs.readdirSync(scriptsDir);
for (var fileName in fileNames) {
	var split = fileNames[fileName].split('_');
	var version = split.pop();
	var scriptName = split.join("_");
	versions[scriptName] = version;
}



/**
 * Execute a command and emit an event whent it is done.
 *
 * COMMAND : {
 *		command: "BASE64 encoded command",
 *		requestId: 1
 * }
 *
 * EVENTS : done(result)	when the command is done
 *			data(data)		when data is written on stdout
 *			errData(data)		when data is written on stderr
 *
 * RESULT : {
 *		requestId: 1,
 *		code: 0,					return code of the command
 *		data: "stdout",				stdout output
 *		start: 123456789,			timestamp
 *		elapsed: 12					in ms
 * }
 */

var command = function (command) {
	// Start time
	var start = new Date().getTime();
	// Decode command
	var decodedCommand = new Buffer(command.command, 'base64').toString('utf-8');
	logger.info('[Commander] Execute command (req: ' + command.requestId + '): ' + decodedCommand);
	// Event emitter
	var eventEmitter = new events.EventEmitter();
	// Exec
	var execution = exec(decodedCommand, {uid: 0});
	var output = '';
	var error = '';
	execution.stdout.on('data', function (data) {
		output += data;
		eventEmitter.emit('data', data);
	});
	execution.stderr.on('data', function (data) {
		error += data;
		eventEmitter.emit('errData', data);
	});
	execution.on('close', function (code) {
		var elapsed = new Date().getTime() - start;
		logger.info('[Commander] Command done in ' + elapsed + 'ms (req: ' + command.requestId + ') with code ' + code);
		eventEmitter.emit('done', {requestId: command.requestId, code: code, data: output, error: error, start: start, elapsed: elapsed});
		if (code != 0) {
			logger.info('[Commander] Command debugging info : \nOutput: ' + output + '\nError: ' + error);
		}
	});
	return eventEmitter;
};



/**
 * Execute a script and emit an event whent it is done.
 *
 * SCRIPT : {
 *		scriptName: "name",
 *		version: "0.1",
 *		arguments: "arguments",
 *		requestId: 1
 * }
 *
 * EVENTS : done(result)	when the script is done
 *			data(data)		when data is written on stdout
 *			errData(data)		when data is written on stderr
 *
 * RESULT : {
 *		requestId: 1,
 *		code: 0,					return code of the command
 *		data: "stdout",				stdout output
 *		start: 123456789,			timestamp
 *		elapsed: 12					in ms
 * }
 */

var script = function (script) {
	// Check if may execute the command
	if (!isScriptLocal(script.scriptName, script.version)) {
		logger.error('[Commander] Asking for execute script that is not local');
		throw new Error('[Commander] Asking for execute script that is not local');
	}
	logger.info('[Commander] Execute script ' + script.scriptName + ' v' + script.version + ' (req: ' + script.requestId + ')');
	// Start time
	var start = new Date().getTime();
	// Event emitter
	var eventEmitter = new events.EventEmitter();
	// Get filename and arguments
	var fileName = scriptsDir + script.scriptName + '_' + versions[script.scriptName];
	var arguments;
	if (script.arguments != undefined) {
		arguments = new Buffer(script.arguments, 'base64').toString('utf-8').split(' ');
	} else {
		arguments = [];
	}
	logger.info('[Commander] Script arguments: ' + arguments);
	// Exec
	var execution = execFile(fileName, arguments, {uid: 0});
	var output = '';
	var error = '';
	execution.stdout.on('data', function (data) {
		output += data;
		eventEmitter.emit('data', data);
	});
	execution.stderr.on('data', function (data) {
		error += data;
		eventEmitter.emit('errData', data);
	});
	execution.on('close', function (code) {
		var elapsed = new Date().getTime() - start;
		logger.info('[Commander] Script done in ' + elapsed + 'ms (req: ' + script.requestId + ') with code ' + code);
		eventEmitter.emit('done', {requestId: script.requestId, code: code, data: output, error: error, start: start, elapsed: elapsed});
		if (code != 0) {
			logger.info('[Commander] Script debugging info : \nOutput: ' + output + '\nError: ' + error);
		}
	});
	return eventEmitter;
};



/**
 * Check if the script is stored locally and if it is
 * in the right version.
 */

var isScriptLocal = function (name, version) {
	return (versions[name] == version);
};



/**
 * Store a script locally. If the script already exist in an
 * old version, delete it.
 *
 * A script file is of the type name_version. For example :
 * restartService_0.1 or update_squid_1.0.0
 * The script name may content the underscore character.
 */

var addScript = function (name, version, script, callback) {
	// If it is an update, delete the old script
	if (versions[name] != undefined) {
		logger.info('[Commander] Update script ' + name + ' from v ' + versions[name] + ' to v' + version);
		var fileName = scriptsDir + name + '_' + versions[name];
		fs.unlink(fileName, function(error) {
			if (error) {
				logger.warn('[Commander] Unable to delete old script file: ' + fileName);
			}
		});
	} else {
		logger.info('[Commander] Add new script: ' + name + ' v' + version);
	}
	// Add new script
	var fileName = scriptsDir + name + '_' + version;
	var fileContents = new Buffer(script, 'base64').toString('utf-8')
	fs.writeFile(fileName, fileContents, {mode: 0755}, function (error) {
		if (error) {
			logger.warn('[Commander] Unable to write new script file: ' + fileName);
		} else {
			logger.info('[Commander] Script added/updated: ' + name + ' v' + version);
			versions[name] = version;
			callback();
		}
	});
};



/**
 * Exports
 */

// Methods
exports.command = command;
exports.script = script;
exports.isScriptLocal = isScriptLocal;
exports.addScript = addScript;