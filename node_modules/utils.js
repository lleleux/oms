/**
 * Load modules
 */

var fs = require('fs');



/**
 * Create a directory and all his parents if needed.
 * The directory must be given on the following example :
 *		/parent/parent/dir
 * The first slash is important, and no last slash must be given
 */

var mkdirpSync = function (directory) {
	var split = directory.split('/');
	split.shift();
	var dir = '';
	for (var i in split) {
		dir += '/' + split[i];
		if (!fs.existsSync(dir)) {
			fs.mkdirSync(dir);
		}
	}
};



/**
 * Delete recursively a directory and all his contents.
 * If the directory not exists, does nothing.
 */

var rmdirrfSync = function(path) {
	if (fs.existsSync(path)) {
		var files = fs.readdirSync(path);
		files.forEach(function (file, index) {
			var curPath = path + "/" + file;
			if (fs.statSync(curPath).isDirectory()) {
				rmdirrfSync(curPath);
			} else {
				fs.unlinkSync(curPath);
			}
		});
		fs.rmdirSync(path);
	}
};

var rmdirrf = function(path, callback) {
	var rmdirParent = function() {
		fs.rmdir(path, function (error) {
			if (!error && callback) callback();
		});
	};
	fs.exists(path, function (exists) {
		if (exists) {
			fs.readdir(path, function (error, files) {
				files.forEach(function (file, index) {
					var curPath = path + "/" + file;
					fs.stat(curPath, function (error, stat) {
						if (stat.isDirectory()) {
							rmdirrf(curPath, rmdirParent);
						} else {
							fs.unlink(curPath, rmdirParent);
						}
					});
				});
			});
		}
	});
};



/**
 * Exports
 */

exports.mkdirpSync = mkdirpSync;
exports.rmdirrf = rmdirrf;
exports.rmdirrfSync = rmdirrfSync;