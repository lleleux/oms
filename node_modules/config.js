/**
 * Load modules
 */

// Built-in
var os = require('os');
var async = require('async');
// Global
var logger = require('logger');
var db = require('db');



/**
 * Variables
 */

// Config
var config = {};
// Dao
var configDao = new db.Dao('config');
var serverDao = new db.Dao('servers');



/**
 * Load config from database from multiple sources.
 * The order is important because the configs are
 * overwritten if present.
 *
 * Defaults < Service < Server
 *
 * A key may not start with an underscore (_) or be
 * equal to 'load', 'server', 'service'.
 *
 * @param server the server hostname
 * @param service the service name
 * @param callback err if error, null else
 */

var load = function (server, service, callback) {
	config.server = server;
	config.service = service;
	var tasks = [
		_loadDefaults,
		_loadService,
		_loadServer
	];
	async.applyEachSeries(tasks, config, function (err) {
		if (err) {
			if (callback) callback(new Error('[Config] Unable to load configuration for server "' + server +'" and service "' + service +'": ' + err.message));
		} else {
			if (callback) callback(null);
		}
	});
};



/**
 * Get config for a specific server/service.
 * The config is returned in the callback and
 * not override the current config.
 *
 * If no service is given, load only the server config.
 *
 * @param server the server hostname
 * @param service the service name, might be null
 * @param err if error, null and the config object else
 */

var get = function (server, service, callback) {
	var conf = {};
	conf.server = server;
	var tasks = [];
	// If service, get all config
	if (service !== null) {
		conf.service = service;
		tasks = [
			_loadDefaults,
			_loadService,
			_loadServer
		];
	}
	// If no service, get only server config
	else {
		var tasks = [
			_loadServer
		];
	}
	// Execute
	async.applyEachSeries(tasks, conf, function (err) {
		if (err) {
			if (callback) callback(new Error('[Config] Unable to get configuration for server "' + server +'" and service "' + service +'": ' + err.message));
		} else {
			if (callback) callback(null, conf);
		}
	});
};



var _loadDefaults = function (conf, callback) {
	logger.info('[Config] Start loading default config from database');
	configDao.findOne({name: conf.service}, function (result) {
		// If a config is found
		if (result !== undefined && result !== null) {
			// Delete unnecessary properties
			delete result._id;
			delete result.name;
			// Copy config
			_copyConfig(result, conf);
			// Done
			logger.info('[Config] Default config loaded from database');
			if (callback) callback(null);
		}
		// If no config found
		else {
			if (callback) callback(new Error('Unable to load default configuration from database'));
		}
	});
};

var _loadService = function (conf, callback) {
	logger.info('[Config] Start loading service config from database');
	var query = {};
	query.hostname = conf.server;
	query['services.' + conf.service] = {$exists: true};
	serverDao.findOne(query, function (result) {
		// If a config is found
		if (result !== undefined && result !== null) {
			// Copy config
			_copyConfig(result.services[conf.service].config, conf);
			// Done
			logger.info('[Config] Service config loaded from database');
			if (callback) callback(null);
		}
		// If no config found
		else {
			if (callback) callback(new Error('Unable to load service configuration from database'));
		}
	});
};

var _loadServer = function (conf, callback) {
	logger.info('[Config] Start loading server config from database');
	serverDao.findOne({hostname: conf.server}, function (server) {
		// If a config is found
		if (server !== undefined && server !== null) {
			// Copy config
			_copyConfig(server.config, conf);
			if (conf.service) {
				conf.serviceTmpDir = server.tmpDir + '/' + conf.service + '/';
			}
			conf.serverTmpDir = server.tmpDir + '/oms/';
			// Done
			logger.info('[Config] Server config loaded from database');
			if (callback) callback(null);
		}
		// If no config found
		else {
			if (callback) callback(new Error('Unable to load server configuration from database'));
		}
	});
};



/**
 * Copy the properties from an object (DB) to the config object.
 * If a "load"/"server"/"service" key is found, ignore and log it
 *
 * @param data the properties to copy
 * @param conf the destination of the copy
 */

var _copyConfig = function (data, conf) {
	// Copy properties
	for (key in data) {
		if (data.hasOwnProperty(key)) {
			if (key == 'load' || key == 'server' || key == 'service' || key.charAt(0) == '_') {
				logger.warn('[Config] A config key has an invalid format: ' + key);
			} else {
				conf[key] = data[key];
			}
		}
	}
	return conf;
};



/**
 * Exports
 */

module.exports = exports = config;
exports.load = load;
exports.get = get;