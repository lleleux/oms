/**
 * Load modules
 */

// Built-in
var os = require('os');
var async = require('async');
// Global
var logger = require('logger');
var db = require('db');



/**
 * Variables
 */

// Config
var config = {};
// Dao
var configDao = new db.Dao('config');
var serverDao = new db.Dao('servers');



/**
 * Load config from database from multiple sources.
 * The order is important because the configs are
 * overwritten if present.
 *
 * Defaults < Service < Server
 *
 * A key may not start with an underscore (_) or be
 * equal to 'load'.
 */

var load = function (omsService, callback) {
	config.omsService = omsService
	var tasks = [
		_loadDefaults,
		_loadService,
		_loadServer
	];
	async.series(tasks, callback)
};

var _loadDefaults = function (callback) {
	logger.info('[Config] Start loading default config from database');
	configDao.findOne({name: config.omsService}, function (result) {
		// If a config is found
		if (result !== undefined && result !== null) {
			// Delete unnecessary properties
			delete result._id;
			delete result.name;
			// Copy config
			_copyConfig(result);
			// Done
			logger.info('[Config] Default config loaded from database');
			if (callback) callback(null);
		}
		// If no config found
		else {
			throw new Error('[Config] Unable to load default configuration from database');
		}
	});
};

var _loadService = function (callback) {
	logger.info('[Config] Start loading service config from database');
	var query = {};
	query.hostname = os.hostname();
	query['services.' + config.omsService] = {$exists: true};
	serverDao.findOne(query, function (result) {
		// If a config is found
		if (result !== undefined && result !== null) {
			// Copy config
			_copyConfig(result.services[config.omsService].config);
			// Done
			logger.info('[Config] Service config loaded from database');
		}
		// If no config found
		else {
			logger.warn('[Config] Unable to load service configuration from database');
		}
		if (callback) callback(null);
	});
};

var _loadServer = function (callback) {
	logger.info('[Config] Start loading server config from database');
	serverDao.findOne({hostname: os.hostname()}, function (result) {
		// If a config is found
		if (result !== undefined && result !== null) {
			// Copy config
			_copyConfig(result.config);
			// Done
			logger.info('[Config] Server config loaded from database');
		}
		// If no config found
		else {
			logger.warn('[Config] Unable to load server configuration from database');
		}
		if (callback) callback(null);
	});
};



/**
 * Copy the properties from an object (DB) to the
 * config object.
 * If a "load" key is found, ignore and log it
 */

var _copyConfig = function (data) {
	// Copy properties
	for (key in data) {
		if (data.hasOwnProperty(key)) {
			if (key == 'load' || key.charAt(0) == '_') {
				logger.warn('[Config] A config key has an invalid format: ' + key);
			} else {
				config[key] = data[key];
			}
		}
	}
};



/**
 * Exports
 */

module.exports = exports = config;
exports.load = load;