/**
 * Load modules
 */

var fs  = require("fs");
var logger = require('logger');



/**
 * Singleton behaviour
 * The initialization is synchronized !
 */

var singleton = function () {

	var config;
	var fileContents;
	var appPath = require('path').dirname(require.main.filename);
	var file = appPath + '/config.properties';

	logger.info('[Config] Start loading config file: ' + file);
	// Read file content
	fileContents = fs.readFileSync(file, 'UTF-8');
	// Populate config
	config = {};
	fileContents.split('\n').forEach(function (line) {
		var split = line.split('=');
		// If the line is of type 'key=value' and starts not with a '#'
		if (split.length == 2 && split[0].charAt(0) != '#' && split[0].length > 0 && split[1].length > 0) {
			config[split[0].trim()] = split[1].trim();
		}
	});
	logger.info('[Config] Config file ' + file + ' loaded');

	/**
	 * Set a config value, and write it in the config file.
	 * If the key exists, overwrite the value, else create it.
	 */
	this.set = function (key, value) {
		var regex = new RegExp("([\t\ ]*" + key + "[\t\ ]*=[\t\ ]*)" + config[key] + "([\t\ ]*)", "ig");
		fileContents = fileContents.replace(regex, "$1" + value + "$2");
		config[key] = value;
		// TODO edit fileContents
		fs.writeFile(file, fileContents, function (error) {
			if (error) {
				// TODO revert changes
				logger.warn('[Config] Error during writing new key/value : ' + error)
			} else {
				logger.info('[Config] New value set : ' + key + ' -> ' + value);
			}
		});
	};

	/**
	 * Get a config value, undefined else.
	 */
	this.get = function (key) {
		return config[key];
	};

};



/**
 * Singleton patern
 */

singleton.instance = null;

singleton.getInstance = function () {
	if (this.instance === null) {
		this.instance = new singleton();
	}
	return this.instance;
}



/**
 * Exports
 */

module.exports = singleton.getInstance();