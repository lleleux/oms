/**
 * Load modules
 */

// Built-in
var fs  = require('fs');
var os = require('os');
// Global
var logger = require('logger');
var config = require('config');
var db = require('db');
var utils = require('utils');



/**
 * Variables
 */

// Config
var configuration;
var files = ['/etc/oms/bootstrap.properties'];

// Dao
var serversDao = new db.Dao('servers');
var configDao = new db.Dao('config');

// Server ID 		TODO persist on server
var serverId;
// Application gracefull exit method
var appGracefulExit;



/**
 * Bootstrap the Server. Opens database connections, set exit handlers...
 *
 * Takes the 3 arguments
 *		- The oms application identifier (api/dev-helper/agent-manager/admin-panel)
 *		- The application gracefull exit callback, a function called before exiting
 *		  the server, he must close all the ressources an call a callback !
 *		  the execution time may not exceed 5 seconds...
 *		- a callback executed after the bootstrap is ended.
 */

var bootstrap = function (omsApplication, appGracefulExitCallback, callback) {
	appGracefulExit = appGracefulExitCallback;
	_loadConfig();
	db.open(configuration.dbHost, configuration.dbPort, 'oms', function () {
		db.open(configuration.dbHost, configuration.dbPort, 'doc', function () {
			config.set('omsApplication', omsApplication);
			config.set('tmpDir', os.tmpdir() + '/' + omsApplication + '/');
			config.loadFromDB(omsApplication, function () {
				_register(callback);
				_bootstrapApplication(omsApplication);	// TODO sync
			});
		});
	});
	process.on('SIGTERM', _gracefulExit);
	process.on('SIGINT', _gracefulExit);
	process.on('uncaughtException', _gracefulExit);
};



/**
 * Load bootstrap configuration (DB connection info)
 */

var _loadConfig = function () {
	// Search config file
	var file;
	for (key in files) {
		if (fs.existsSync(files[key])) {
			file = files[key];
			break;
		}
	}
	// If no config file found
	if (file === undefined) {
		throw new Error('[Bootstrap] No config file found in the following places: ' + files);
	}

	// Start loading config
	logger.info('[Bootstrap] Start loading config file: ' + file);
	// Read file content
	var fileContents = fs.readFileSync(file, 'UTF-8');
	// Populate config
	configuration = {};
	fileContents.split('\n').forEach(function (line) {
		var split = line.split('=');
		// If the line is of type 'key=value' and starts not with a '#'
		if (split.length == 2 && split[0].charAt(0) != '#' && split[0].length > 0 && split[1].length > 0) {
			configuration[split[0].trim()] = split[1].trim();
		}
	});
	logger.info('[Bootstrap] Config file ' + file + ' loaded');
};



/**
 * Register the server in the DataBase.
 * If an error occurs, an error is thrown.
 */

var _register = function (callback) {
	serversDao.findOne({hostname: os.hostname}, function (server) {
		// If no server, insert it, then register service
		if (server === undefined || server === null) {
			_registerServer(function () {
				_registerService(server, callback);
			});
		}
		// If a server, only register the service
		else {
			_registerService(server, callback);
		}
	});
};

// Register the server by inserting in DB
var _registerServer = function (callback) {
	var serverInfos = {
		hostname:			os.hostname(),
		totalMemory:		os.totalmem(),
		cpus:				os.cpus(),
		networkInterfaces:	os.networkInterfaces(),
		architecture:		os.arch(),
		platform:			os.platform(),
		type:				os.type(),
		tmpDir:				os.tmpdir(),
		services:	 		[]
	};
	serversDao.insert(serverInfos, function (result) {
		// If server correctly registered
		if (result !== undefined && result !== null) {
			logger.info('[Bootstrap] Server registered');
			if (callback) callback();
		}
		// If error during registration
		else {
			throw new Error('[Bootstrap] Unable to register the server');
		}
	});
};

// Register the service by updating the existing server
var _registerService = function (server, callback) {
	var omsApplication = config.get('omsApplication');
	var index = _getServiceKey(server);
	// Add service
	if (index === undefined) {
		var service = {
			name:		omsApplication,
			status:		'running',
			start:		new Date().getTime(),
		};
		serversDao._update({'_id': server._id}, {$push: {services: service}}, {}, function () {
			logger.info('[Bootstrap] Service registered');
			if (callback) callback();
		});
	}
	// Update service
	else {
		var params = {};
		params['services.' + index + '.status'] = 'running';
		params['services.' + index + '.start'] = new Date().getTime();
		serversDao.update(server._id, params, function () {
			logger.info('[Bootstrap] Service registered');
			if (callback) callback();
		});
	}
};

// Find service key in services list
var _getServiceKey = function (server) {
	var omsApplication = config.get('omsApplication');
	// Search for service
	for (var key in server.services) {
		if (server.services[key].name == omsApplication) {
			return key;
		}
	}
}



/**
 * Unregister the server of the database
 * If the serverId is undefined, only calls the callback.
 */

var _unregister = function (callback) {
	var query = {
		hostname: os.hostname(),
		services: {
			$elemMatch: {name: config.get('omsApplication')}
		}
	};
	serversDao.findOne(query, function (server) {
		// Unregister the server
		if (server !== undefined && server !== null) {
			// Get service index
			var index = _getServiceKey(server);
			if (index) {
				var params = {};
				params['services.' + index + '.status'] = 'stopped';
				params['services.' + index + '.stop'] = new Date().getTime();
				serversDao.update(server._id, params, function () {
					logger.info('[Bootstrap] Service unregistered');
					if (callback) callback();
				});
			} else {
				logger.warn('[Bootstrap] Service is not registered');
				if (callback) callback();
			}

		}
		// If no server, problem...
		else {
			logger.warn('[Bootstrap] Server is not registered');
			if (callback) callback();
		}
	});
};



/**
 * Bootstrap specific application
 */

var _bootstrapApplication = function (omsApplication) {
	// Initialize TMP directory for the application
	var tmpDir = config.get('tmpDir');
	if (fs.existsSync(tmpDir)) {
		logger.warn('[Bootstrap] Temporary directory ' + tmpDir + ' not deleted during the past application run');
		utils.rmdirrfSync(tmpDir);
	}
	fs.mkdirSync(tmpDir);
	// Specific bootstrap per application
	switch (omsApplication) {
		case 'oms-api':
			// Get CA files
			configDao.findOne({name: 'certificationAuthority'}, function (ca) {
				fs.writeFileSync(tmpDir + ca.certificate.filename, ca.certificate.contents);
				fs.writeFileSync(tmpDir + ca.private_key.filename, ca.private_key.contents);
			});
			break;
		case 'oms-agent-manager':
			break;
		case 'oms-admin-panel':
			break;
		case 'oms-dev-helper':
			break;
		default:
			logger.warn('[Bootstrap] Unknown omsApplication for the application bootstrap: ' + omsApplication);
			break;
	}
}



/**
 * Graceful Exit
 */

var _gracefulExit = function () {
	logger.warn('[Bootstrap] Gracefull exit started')

	// Unregister server in DB and close the database, after, exit gracefully
	var unregisterAndClose = function () {
		_unregister(function () {
			db.close('doc', function () {
				db.close('oms', function () {
					logger.info('[Bootstrap] Server gracefully closed');
					process.exit();
				});
			});
		});
	}

	// Set timer to force unregister and close DB in 5 seconds, if the appGracefulExit does not work.
	setTimeout(function() {
		unregisterAndClose();
	}, 5000);

	// Set timer to force exit in 10 seconds
	setTimeout(function() {
		logger.info('[Bootstrap] Server forced closed');
		process.exit();
	}, 10000);

	// Call the Application gracefull exit method
	appGracefulExit(function () {
		unregisterAndClose();
	});
}



/**
 * Exports
 */

// Methods
exports.bootstrap = bootstrap;