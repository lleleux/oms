/**
 * =============================
 *
 * Bootstrap and gracefull exit the application. This module
 *		- registers listeners on process signals
 *		- open database connections
 *		- register the service in the DB
 *		- load configuration in DB
 *		- Execute other bootstrap methods defined in the bootstrap folder
 *
 * The bootstrap folder contains files that will be executed during the
 * bootstrap process. The "oms-all" file will be executed for each service.
 * For a specific service, the file must have the name of the service.
 *
 * If an error occurs during the bootstrap process, the module throws an error.
 *
 * =============================
 *
 * Attributes : /
 *
 * Methods :
 *		- bootstrap(service, serviceGracefulExitCallback, [callback])
 *
 * Events : /
 *
 * =============================
 */



/**
 * Load modules
 */

// Built-in
var fs  = require('fs');
var os = require('os');
var async = require('async');
// Global
var logger = require('logger');
var config = require('config');
var db = require('db');
// Custom
var registration = require('./bootstrap/registration');



/**
 * Variables
 */

// The config found in the bootstrap file
var bootstrapConfig;
// An array of files that will be used to find the bootstrap.properties file
var files = ['/etc/oms/bootstrap.properties'];

// Application gracefull exit method
var appGracefulExit;



/**
 * Bootstrap the Server. Opens database connections, set exit handlers...
 *
 * @param service the oms application identifier (api/dev-helper/agent-manager/admin-panel)
 * @param serviceGracefulExitCallback The application gracefull exit callback, a function called before exiting
 * the server, he must close all the ressources an call a callback ! the execution time may not exceed 5 seconds...
 * @param callback a callback executed after the bootstrap is ended. No error is given, the errors are thrown.
 */

var bootstrap = function (service, serviceGracefulExitCallback, callback) {
	// Set the service gracefull exit callback
	appGracefulExit = serviceGracefulExitCallback;
	// Set gracefull exit handler
	process.on('SIGTERM', _gracefulExit);
	process.on('SIGINT', _gracefulExit);
	process.on('uncaughtException', _gracefulExit);
	// Open the databases
	var tasks = [
		// Load bootstrap config file
		function (serieCallback){ _loadConfig(serieCallback); },
		// Open database connections
		function (serieCallback){ db.open(bootstrapConfig.dbHost, bootstrapConfig.dbPort, ['oms', 'doc'], serieCallback); },
		// Register service in DB
		function (serieCallback){ registration.register(service, serieCallback); },
		// Load configuration from DB
		function (serieCallback){ config.load(os.hostname(), service, serieCallback); },
		// Bootstrap the service
		function (serieCallback){ _bootstrapService(serieCallback); },
	];
	// Execute tasks
	async.series(tasks, function (err) {
		if (err) {
			throw new Error('[Bootstrap] Unable to bootstrap the service "' + service + '": ' + err.message);
		} else {
			if (callback) callback(null);
		}
	});
};



/**
 * Load bootstrap configuration (DB connection info) found in
 * the bootstrap.properties file.
 *
 * @param callback return an error or null
 */

var _loadConfig = function (callback) {
	// Search config file
	var file;
	for (key in files) {
		if (fs.existsSync(files[key])) {
			file = files[key];
			break;
		}
	}
	// If no config file found
	if (file === undefined) {
		if (callback) callback(new Error('[Bootstrap] No config file found in the following places: ' + files));
		return;
	}

	// Start loading config
	logger.info('[Bootstrap] Start loading config file: ' + file);
	// Read file content
	var fileContents = fs.readFileSync(file, 'UTF-8');
	// Populate config
	bootstrapConfig = {};
	fileContents.split('\n').forEach(function (line) {
		var split = line.split('=');
		// If the line is of type 'key=value' and starts not with a '#'
		if (split.length == 2 && split[0].charAt(0) != '#' && split[0].length > 0 && split[1].length > 0) {
			bootstrapConfig[split[0].trim()] = split[1].trim();
		}
	});
	logger.info('[Bootstrap] Config file ' + file + ' loaded');
	if (callback) callback(null);
};



/**
 * Bootstrap a specific service
 *
 * First, the "oms-all" file is opened and every method
 * in it is executed in a defined order :
 *		- "before" tasks in parallel
 *		- "tasks" tasks in parallel
 *		- "after" tasks in parallel
 * The before/tasks/after are executed in serie.
 *
 * After these tasks, the service specific file is opened and
 * executed in the same way as the "oms-all" file. The service
 * file must have the name of the service name.
 *
 * @param callback return an error or null
 */

var _bootstrapService = function (callback) {
	var service = config.service
	var all = require('./bootstrap/oms-all.js');
	var service = require('./bootstrap/' + service + '.js');
	// Prepare execution of "oms-all" and "oms-service" functions in serie :
	// before -> tasks -> after -> before -> tasks -> after
	// All the functions in each part are executed in parallel
	var serie = [
		function (serieCallback) { async.parallel(all.before, serieCallback); },
		function (serieCallback) { async.parallel(all.tasks, serieCallback); },
		function (serieCallback) { async.parallel(all.after, serieCallback); },
		function (serieCallback) { async.parallel(service.before, serieCallback); },
		function (serieCallback) { async.parallel(service.tasks, serieCallback); },
		function (serieCallback) { async.parallel(service.after, serieCallback); }
	];
	// Execute the serie of bootstraps
	async.series(serie, function (err) {
		if (err) {
			if (callback) callback(new Error('[Bootstrap] Unable to bootstrap service "' + service + '": ' + err.message));
		} else {
			if (callback) callback(null);
		}
	});
};



/**
 * Graceful Exit method, executed when the service is killed
 * or when a fatal error occurs.
 *
 * This method calls the callback method given at bootstrap time,
 * and after it, unregister the service and clode DB connections.
 * If the callback execution time is greater than 5seconds, the
 * service is automatically unregistered and closed.
 * If the server cannot be unregistered, the process is hard killed
 * after 10 seconds.
 *
 * So, the service's process is ALWAYS exited after 10 seconds.
 */

var _gracefulExit = function () {
	logger.warn('[Bootstrap] Gracefull exit started')

	// Unregister server in DB and close the database, after, exit gracefully
	var unregisterAndClose = function () {
		registration.unregister(function () {
			db.close(function () {
				logger.info('[Bootstrap] Server gracefully closed');
				process.exit();
			});
		});
	};

	// Set timer to force unregister and close DB in 5 seconds, if the appGracefulExit does not work.
	setTimeout(function() {
		unregisterAndClose();
	}, 5000);

	// Set timer to force exit in 10 seconds
	setTimeout(function() {
		logger.info('[Bootstrap] Server forced closed');
		process.exit();
	}, 10000);

	// Call the Application gracefull exit method
	appGracefulExit(function () {
		unregisterAndClose();
	});
};



/**
 * Exports
 */

// Methods
exports.bootstrap = bootstrap;