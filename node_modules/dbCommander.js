/**
 * =============================
 *
 * Executes commands and scripts on the host.
 *
 * This module abstracts totally the management of
 * the scripts, versions...
 * Only the script name and the parameters are needed.
 *
 * The parameters must be of the type : {key: value, ...}
 * In the command or script arguments, the parameters
 * can be set with mustaches: {{key}}
 * This templating works only with de commands and script
 * arguments. Not in the script contents.
 *
 * =============================
 *
 * Attributes : /
 *
 * Methods :
 *		- command(name, parameters, [callback])
 *
 * Events : /
 *
 * =============================
 */



/**
 * Load modules
 */

// Built-in
var events = require('events');
// Global
var logger = require('logger');
var config = require('config');
var commander = require('commander');
var Dao = require('db').Dao;



/**
 * Variables
 */

// DAO
var commands = new Dao('commands');
var scripts = new Dao('scripts');



/**
 * Execute a command stored in DB
 */

var command = function (name, parameters, callback) {
	// Find command in DB
	commands.findOne({name: name}, function (dbCommand) {
		if (dbCommand === undefined || dbCommand === null) {
			logger.error('[DbCommander] Unable to find command "' + name +'" in DB');
			return;
		}
		// If it is a script
		if (dbCommand.script !== undefined) {
			// Find script in DB
			scripts.findOne({name: dbCommand.script}, function (dbScript) {
				// Execute the script
				var executeScript = function () {
					var scriptToExec = {
						scriptName: 	dbScript.name,
						version: 		dbScript.version,
						arguments: 		prepareBase64String(dbCommand.arguments, parameters)
					};
					var exec = commander.script(scriptToExec);
					exec.on('done', function (result) {
						if (callback) callback(result);
					});
				}
				// Check if the script is local
				if (!commander.isScriptLocal(dbScript.name, dbScript.version)) {
					// Add the script and execute it when added
					commander.addScript(dbScript.name, dbScript.version, dbScript.content, function () {
						executeScript();
					});
				} else {
					executeScript();
				}
			});
		}
		// If it is a command
		else {
			// Execute the command and callback the result
			var exec = commander.command({command: prepareBase64String(dbCommand.command, parameters)});
			exec.on('done', function (result) {
				if (callback) callback(result);
			});
		}
	});
};



/**
 * Execute a command stored in DB in daemon mode.
 * The eventEmitter is returned in the callback.
 * This object fires 3 events :
 *		- data(data)		when data is written on stdout
 *		- error(data)		when data is written on stderr
 * 		- done(result)		when the command is done
 */

var daemon = function (name, parameters, callback) {
	// Find command in DB
	commands.findOne({name: name}, function (dbCommand) {
		// If it is a script
		if (dbCommand.script !== undefined) {
			// Find script in DB
			scripts.findOne({name: dbCommand.script}, function(dbScript) {
				// Execute the script
				var executeScript = function () {
					var scriptToExec = {
						scriptName: 	dbScript.name,
						version: 		dbScript.version,
						arguments: 		prepareBase64String(dbCommand.arguments, parameters)
					};
					var exec = commander.script(scriptToExec);
					callback(exec);
				}
				// Check if the script is local
				if (!commander.isScriptLocal(dbScript.name, dbScript.version)) {
					// Add the script and execute it when added
					commander.addScript(dbScript.name, dbScript.version, dbScript.content, function () {
						executeScript();
					});
				} else {
					executeScript();
				}
			});
		}
		// If it is a command
		else {
			// Execute the command and callback the result
			var exec = commander.command({command: prepareBase64String(dbCommand.command, parameters)});
			callback(exec);
		}
	});
};



/**
 * Prepare the string encoded in base 64 by replacing the {{}} by the parameters.
 * Returns a base64 encoded string.
 */
var prepareBase64String = function (string, parameters) {
	var preparedString = new Buffer(string, 'base64').toString('utf-8');
	for (var parameter in parameters) {
		var regexp = new RegExp('{{' + parameter + '}}', 'g')
		preparedString = preparedString.replace(regexp, parameters[parameter]);
	}
	preparedString = new Buffer(preparedString).toString('base64');
	return preparedString;
};



/**
 * Exports
 */

// methods
exports.command = command;
exports.daemon = daemon;