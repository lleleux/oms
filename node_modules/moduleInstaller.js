/**
 * =============================
 *
 * Description
 *
 * =============================
 *
 * Attributes : /
 *
 * Methods : /
 *
 * Events : /
 *
 * =============================
 */



/**
 * Load modules
 */

// Built-in
var fs = require('fs');
// Global
var logger = require('logger');
var db = require('db');



/**
 * Variables
 */

var commands = new db.Dao('commands');



/**
 * Load a command file and insert it in the commands collection.
 * If the update flag is set to true, all the existing commands
 * will be overwritten.
 * By default, update is set to false
 */

var loadCommandFile = function (filename, update) {
	logger.info('[ModuleInstaller] Start loading commands file: ' + filename);
	// Read file content
	fileContents = fs.readFileSync(filename, 'UTF-8');
	// Populate commands to insert
	var commandsToInsert = [];
	fileContents.split('\n').forEach(function (line) {
		var split = line.split('=');
		// If the line is of type 'key=value' and starts not with a '#'. The join is used becaus the value can have '=' characters
		var key = split.shift().trim();
		var value = split.join('=').trim();
		if (key.length > 0 && key.charAt(0) != '#' && value.length > 0) {
			var command = {
				name:		key,
				command:	new Buffer(value).toString('base64'),
				version:	'1.0'
			};
			commandsToInsert.push(command);
		}
	});
	logger.info('[ModuleInstaller] Commands file ' + filename + ' loaded');
	// Insert commands
	var insert = function() {
		commands.insert(commandsToInsert, function (result) {
			logger.info('[ModuleInstaller] Commands inserted');
			db.close();
		});
	};
	// If update, remove old commands and the insert
	if (update) {
		commands._remove({}, {}, function () {		// TODO set in DAO
			insert();
		});
	} else {
		insert();
	}
};



/**
 * App
 */

db.connect(function () {
	loadCommandFile('/home/laurent/Desktop/commands', false);
});