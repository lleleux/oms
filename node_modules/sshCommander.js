/**
 * =============================
 *
 * =============================
 *
 * Attributes : /
 *
 * Methods : /
 *
 * Events : /
 *
 * =============================
 */



/**
 * Load modules
 */

// Built-in
var events = require('events');
var os = require('os');
var dns = require('dns');
var fs = require('fs');
// Global
var logger = require('logger');
var config = require('config');
var commander = require('commander');
var dbCommander = require('dbCommander');
var db = require('db');



/**
 * Variables
 */

// DAO
var commandDao = new db.Dao('commands');
var scriptDao = new db.Dao('scripts');
var serverDao = new db.Dao('servers');



/**
 * Execute a command stored in DB
 */

var command = function (hostname, name, parameters, callback) {
	_getHost(hostname, function (err, host) {
		if (err) {
			if (callback) callback(new Error('[MaintenanceCommander] Unable to execute command: ' + err.message));
		} else {
			_command(false, hostname, host, name, parameters, callback);
		}
	});
};

var daemon = function (hostname, name, parameters, callback) {
	_getHost(hostname, function (err, host) {
		if (err) {
			if (callback) callback(new Error('[MaintenanceCommander] Unable to execute daemon: ' + err.message));
		} else {
			_command(true, hostname, host, name, parameters, callback);
		}
	});
};



var _command = function (isDaemon, hostname, host, name, parameters, callback) {
	// Find command in DB
	commandDao.findOne({name: name}, function (dbCommand) {
		// Check if command exists, if not, exit...
		if (dbCommand === undefined || dbCommand === null) {
			if (callback) callback(new Error('Unable to find command "' + name + '" in DB'));
			return;
		}
		// Get ssh Params
		var sshParams = {
			key:		config.serverTmpDir + 'key',
			username:	'oms',	// TODO get in conf
			host:		host,
		};
		// If it is a script
		if (dbCommand.script !== undefined) {
			// Check if script exists on server
			sshParams.filename = config.serverTmpDir + 'scripts/' + dbCommand.script + '_' + dbCommand.version;
			dbCommander.command('check-script', sshParams, function (result) {
				// Execute function
				var execute = function () {
					sshParams.arguments = prepareString(dbCommand.arguments, parameters);
					if (isDaemon) {
						dbCommander.daemon('sshScript', sshParams, function (exec) {
							if (callback) callback(exec);
						});
					} else {
						dbCommander.command('sshScript', sshParams, function (result) {
							if (callback) callback(result);
						});
					}
				};
				// If no script, copy it
				if (result.code != 0) {
					_copyScript(hostname, dbCommand.script, sshParams, function (err) {
						if (err) {
							if (callback) callback(err);
						} else {
							execute();
						}
					});
				}
				// Execute
				else {
					execute();
				}
			});
		}
		// If it is a command
		else {
			sshParams.command = prepareBase64String(dbCommand.command, parameters);
			dbCommander.command('sshCommand', sshParams, function (result) {
				if (callback) callback(result);
			});
		}
	});
};



/**
 * Copy script on the remote host
 *
 * @param server the server hostname to copy to
 * @param script the script name
 * @param sshParams ssh params object containing username/host/key
 * @param callback a callback returning nothing or err if error
 */

var _copyScript = function (server, script, sshParams, callback) {
	scriptDao.findOne({name: script}, function (dbScript) {
		// Script found
		if (dbScript) {
			// Get server config to know where store the script
			config.get(server, null, function (err, conf) {
				// Config got
				if (conf) {
					sshParams.filename = conf.serverTmpDir + 'scripts/' + script + '_' + dbScript.version;
					sshParams.script = dbScript.content;
					dbCommander.command('copy-script', sshParams, function (result) {
						if (callback) callback(null);
					});
				}
				// Config not found
				else {
					if (callback) callback(new Error('Unable to load config for server: ' + err.message));
				}
			});
		}
		// Script not found
		else {
			if (callback) callback(new Error('Script ' + script + 'not found'));
		}
	});
};



/**
 * Get maintenance host for server.
 * If a host is set in the config, use it.
 * If it is not resolvable, throw an error.
 * Else, check if the hostname is resolvable.
 * If yes, use it, else throw an error.
 */

var _getHost = function (hostname, callback) {
	serverDao.findOne({hostname: hostname}, function (server) {
		if (server) {
			// Config
			var host = server.config['maintenance-host'];
			if (host) {
				dns.lookup(host, function (err, ip) {
					if (ip) {
						if (callback) callback(null, host);
					} else {
						if (callback) callback(new Error('Config hostname not resolvable: ' + host));
					}
				});
			}
			// Hostname
			else {
				dns.lookup(hostname, function (err, ip) {
					if (ip) {
						if (callback) callback(null, hostname);
					} else {
						if (callback) callback(new Error('Config hostname not resolvable: ' + hostname));
					}
				});
			}
		} else {
			if (callback) callback(new Error('Server not found in database: ' + hostname));
		}
	});
};



/**
 * Prepare the string encoded in base 64 by replacing the {{}} by the parameters.
 * Returns a base64 encoded string.
 */
var prepareBase64String = function (encodedString, parameters) {
	var preparedString = prepareString(encodedString, parameters);
	preparedString = new Buffer(preparedString).toString('base64');
	return preparedString;
};

var prepareString = function (encodedString, parameters) {
	var preparedString = new Buffer(encodedString, 'base64').toString('utf-8');
	for (var parameter in parameters) {
		var regexp = new RegExp('{{' + parameter + '}}', 'g');
		preparedString = preparedString.replace(regexp, parameters[parameter]);
	}
	return preparedString;
};



/**
 * Exports
 */

// methods
exports.command = command;
exports.daemon = daemon;