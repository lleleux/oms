/**
 * Load modules
 */

// Built-in
var fs = require('fs');
// Global
var config = require('config');
var db = require('db');
var utils = require('utils');
var logger = require('logger');
var dbCommander = require('dbCommander');



/**
 * Variables
 */

var serversDao = new db.Dao('servers');



/**
 * Create TMP directory for the service.
 * Delete it if previously present
 */
var initServiceTmpDir = function (callback) {
	var tmpDir = config.serviceTmpDir;
	if (fs.existsSync(tmpDir)) {
		logger.warn('[Bootstrap] Temporary service directory ' + tmpDir + ' not deleted during the past application run, deleting it');
		utils.rmdirrfSync(tmpDir);
	}
	fs.mkdirSync(tmpDir);
	logger.info('[Bootstrap] Temporary service directory ' + tmpDir + ' created');
	if (callback) callback(null);
};

/**
 * Create TMP directory for the server.
 */
var initServerTmpDir = function (callback) {
	var tmpDir = config.serverTmpDir;
	if (!fs.existsSync(tmpDir)) {
		fs.mkdirSync(tmpDir);
		logger.info('[Bootstrap] Temporary server directory ' + tmpDir + ' created');
	} else {
		logger.info('[Bootstrap] No need to create temporary service directory ' + tmpDir + ' because already present');
	}
	if (callback) callback(null);
};

/**
 * Initiatize the maintenance user to allow other servers to
 * connect to me :
 *		- Create SSH keys if they not exists
 */
var createMaintenanceUserKeys = function (callback) {
	// Create ssh keys if not exists
	if (!config.maintenancePrivateKey) {
		// Key filename
		var key = config.serverTmpDir + 'key';
		// Execute command
		dbCommander.command('create-ssh-keys', {filename: key}, function (result) {
			if (result.code !== 0) {
				throw new Error('[Bootstrap] Unable to create ssh keys for maintenance user');
			}
			var data = {
				'config.maintenanceUser':			'oms',
				'config.maintenancePublicKey':		fs.readFileSync(key + '.pub').toString(),
				'config.maintenancePrivateKey':		fs.readFileSync(key).toString()
			};
			serversDao.update(config.serverId, data, function () {
				// Remove key files
				fs.unlinkSync(key + '.pub');
				fs.unlinkSync(key);
				// Reload config to add keys
				config.reload(function (err) {
					// Callback
					logger.info('[Bootstrap] Maintenance user ready to connect : keys generated');
					if (callback) callback(err);
				});
			});
		});
	} else {
		if (callback) callback(null);
	}
};

/**
 * Initiatize the maintenance user to allow other servers to
 * connect to me :
 *		- Create SSH home directory
 *		- Add authorized_keys file
 */
var initMaintenanceUser = function (callback) {
	// Initialize SSH directory for maintenance user
	var sshDir = config.serverTmpDir + '.ssh/';
	if (fs.existsSync(sshDir)) {
		logger.warn('[Bootstrap] Temporary ssh directory ' + sshDir + ' already present');
	} else {
		utils.mkdirpSync(sshDir);
	}

	// Set authorized_keys file in the maintenance user home to connect from dev-helper service
	var authorized_keys = sshDir + 'authorized_keys';
	if (fs.existsSync(authorized_keys)) {
		fs.unlinkSync(authorized_keys);
	}
	fs.writeFileSync(authorized_keys, config.maintenancePublicKey);
	logger.info('[Bootstrap] Maintenance user ready to accept connections')

	// Callback
	if (callback) callback(null);
};



/**
 * Exports
 */

// Variables
exports.before =	[
						initServiceTmpDir,
						initServerTmpDir,
					];
exports.tasks =		[
						createMaintenanceUserKeys
					];
exports.after =		[
						initMaintenanceUser
					];