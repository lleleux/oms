/**
 * Load modules
 */

// Built-in
var fs = require('fs');
// Global
var config = require('config');
var db = require('db');
var utils = require('utils');
var logger = require('logger');



/**
 * Variables
 */

var serversDao = new db.Dao('servers');



/**
 * Create TMP directory for the service.
 * Delete it if previously present
 */
var initServiceTmpDir = function (callback) {
	var tmpDir = config.get('serviceTmpDir');
	if (fs.existsSync(tmpDir)) {
		logger.warn('[Bootstrap] Temporary service directory ' + tmpDir + ' not deleted during the past application run, deleting it');
		utils.rmdirrfSync(tmpDir);
	}
	fs.mkdirSync(tmpDir);
	logger.info('[Bootstrap] Temporary service directory ' + tmpDir + ' created');
	if (callback) callback(null);
};

/**
 * Create TMP directory for the server.
 */
var initServerTmpDir = function (callback) {
	var tmpDir = config.get('serverTmpDir');
	if (!fs.existsSync(tmpDir)) {
		fs.mkdirSync(tmpDir);
		logger.info('[Bootstrap] Temporary server directory ' + tmpDir + ' created');
	} else {
		logger.info('[Bootstrap] No need to create temporary service directory ' + tmpDir + ' because already present');
	}
	if (callback) callback(null);
};

/**
 * Initialise maintenance user
 */
var initMaintenanceUser = function (callback) {
	// Look for dev-helper service installation
	var query = {};
	query['services.oms-dev-helper'] = {$exists: true};
	serversDao.findOne(query, function (result) {
		// If a dev-helper service is installed
		if (result !== null && result !== undefined) {
			// Initialize SSH directory for maintenance user
			var sshDir = config.get('serverTmpDir') + '.ssh/';
			if (fs.existsSync(sshDir)) {
				logger.warn('[Bootstrap] Temporary ssh directory ' + sshDir + ' already present');
			} else {
				utils.mkdirpSync(sshDir);
			}
			// Set authorized_keys file in the maintenance user home to connect from dev-helper service
			var authorized_keys = sshDir + 'authorized_keys';
			if (fs.existsSync(authorized_keys)) {
				fs.unlinkSync(authorized_keys);
			}
			fs.writeFileSync(authorized_keys, result.services['oms-dev-helper'].maintenancePublicKey);
			logger.info('[Bootstrap] Maintenance user ready to accept connections')
		}
		// If no dev-helper service is installed
		else {
			throw new Error('[Bootstrap] Unable to launch application, no dev-helper service is installed');
		}
		if (callback) callback(null);
	});
};



/**
 * Exports
 */

// Variables
exports.before =	[
						initServiceTmpDir,
						initServerTmpDir,
					];
exports.tasks =		[
						initMaintenanceUser
					];
exports.after =		[
					];