/**
 * =============================
 *
 * Registration module for server and service registration
 * on bootstrap.
 *
 * Register the server and the service in the Database. Set
 * and update information about the server/service on boot
 * and exit time.
 *
 * =============================
 *
 * Attributes : /
 *
 * Methods :
 *		- register(callback)
 *		- unregister(callback)
 *
 * Events : /
 *
 * =============================
 */



/**
 * Load modules
 */

// Built-in
var os = require('os');
// Global
var logger = require('logger');
var config = require('config');
var db = require('db');



/**
 * Variables
 */

// Dao
var serversDao = new db.Dao('servers');



/**
 * Register the server in the DataBase.
 * If an error occurs, an error is thrown.
 */

var register = function (callback) {
	serversDao.findOne({hostname: os.hostname()}, function (server) {
		_registerServer(server, function (server, err) {
			if (server) {
				_registerService(server, callback);
			} else {
				if (callback) callback(new Error('[Registration] Unable to register server: ' + err.message));
			}
		});
	});
};



/**
 * Register the server by inserting/updating in DB
 *
 * @param server the server got in DB, may be null
 * @param calback a callback returning an error, or null and the server
 */

var _registerServer = function (server, callback) {
	var serverInfos = {
		hostname:			os.hostname(),
		totalMemory:		os.totalmem(),
		cpus:				os.cpus(),
		networkInterfaces:	os.networkInterfaces(),
		architecture:		os.arch(),
		platform:			os.platform(),
		release:			os.release(),
		type:				os.type(),
		tmpDir:				os.tmpdir(),
		config:	{
			'maintenance-username':		'oms'	// TODO
		}
	};
	// If the server is already registered, only update it
	if (server) {
		serversDao.update(server._id, serverInfos, function (result) {
			// If server correctly registered
			if (result !== undefined && result !== null) {
				logger.info('[Bootstrap] Server registered (updated)');
				if (callback) callback(server);
			}
			// If error during registration
			else {
				if (callback) callback(null, new Error('Unable to update the server in DB'));
			}
		});
	}
	// Insert a new server
	else {
		serverInfos.services = {};
		serversDao.insert(serverInfos, function (result) {
			// If server correctly registered
			if (result !== undefined && result !== null) {
				logger.info('[Bootstrap] Server registered (inserted)');
				if (callback) callback(result[0]);
			}
			// If error during registration
			else {
				if (callback) callback(null, new Error('Unable to insert the server in DB'));
			}
		});
	}
};

// Register the service by updating the existing server
var _registerService = function (server, callback) {
	var service = config.service;
	// Add service
	if (server.services[service] === undefined) {
		var service = {
			name:		service,
			status:		'running',
			start:		new Date().getTime(),
			pid:		process.pid
		};
		var data = {};
		data['services.' + service] = service;
		serversDao.update(server._id, data, function () {
			logger.info('[Bootstrap] Service registered');
			if (callback) callback();
		});
	}
	// Update service
	else {
		var params = {};
		params['services.' + service + '.status'] = 'running';
		params['services.' + service + '.start'] = new Date().getTime();
		params['services.' + service + '.pid'] = process.pid;
		serversDao.update(server._id, params, function () {
			logger.info('[Bootstrap] Service registered');
			if (callback) callback();
		});
	}
};



/**
 * Unregister the server of the database
 * If the serverId is undefined, only calls the callback.
 */

var unregister = function (callback) {
	var service = config.service;
	var query = {};
	query.hostname = os.hostname();
	query['services.' + service] = {$exists: true};
	serversDao.findOne(query, function (server) {
		// Unregister the server
		if (server !== undefined && server !== null) {
			if (server.services[service]) {
				var params = {};
				params['services.' + service + '.status'] = 'stopped';
				params['services.' + service + '.stop'] = new Date().getTime();
				params['services.' + service + '.pid'] = '';
				serversDao.update(server._id, params, function () {
					logger.info('[Bootstrap] Service unregistered');
					if (callback) callback();
				});
			} else {
				logger.warn('[Bootstrap] Service is not registered');
				if (callback) callback();
			}

		}
		// If no server, problem...
		else {
			logger.warn('[Bootstrap] Server is not registered');
			if (callback) callback();
		}
	});
};



/**
 * Exports
 */
exports.register = register;
exports.unregister = unregister;