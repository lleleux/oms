/**
 * Load modules
 */

// Built-in
var fs = require('fs');
// Global
var config = require('config');
var db = require('db');
var logger = require('logger');
var dbCommander = require('dbCommander');



/**
 * Variables
 */

var serversDao = new db.Dao('servers');



/**
 * Add the maintenance user's private key to login with SSH
 * on other servers
 */
var addMaintenanceUserPrivateKey = function (callback) {
	var query = {};
	query['services.oms-dev-helper'] = {$exists: true};
	serversDao.findOne(query, function (server) {
		// If a dev-helper service is installed
		if (server !== null && server !== undefined) {
			// Key filename
			var key = config.get('serverTmpDir') + 'key';
			// Create ssh keys if not exists
			if (!server.services['oms-dev-helper'].maintenancePrivateKey) {
				dbCommander.command('create-ssh-keys', {filename: key}, function (result) {
					if (result.code !== 0) {
						throw new Error('[Bootstrap] Unable to create ssh keys for maintenance user');
					}
					var data = {
						'services.oms-dev-helper.maintenancePublicKey':		fs.readFileSync(key + '.pub').toString(),
						'services.oms-dev-helper.maintenancePrivateKey':	fs.readFileSync(key).toString()
					};
					serversDao.update(server._id, data, function () {
						fs.unlinkSync(key + '.pub');
						logger.info('[Bootstrap] Maintenance user ready to connect : keys generated');
					});
				});
			}
			// Set the ssh private key file in the maintenance user home to connect to other servers
			else {
				fs.writeFileSync(key, server.services['oms-dev-helper'].maintenancePrivateKey);
				fs.chmodSync(key, '600');
				logger.info('[Bootstrap] Maintenance user ready to connect : key got from DB');
			}
		}
		// If no dev-helper service is installed
		else {
			throw new Error('[Bootstrap] Unable to launch application, no dev-helper service is installed');
		}
		if (callback) callback(null);
	});
};



/**
 * Exports
 */

// Variables
exports.before = 	[
					];
exports.tasks = 	[
						addMaintenanceUserPrivateKey
					];
exports.after = 	[
					];