/**
 * =============================
 *
 * Certification authority manager
 * Generate certificates/keys for agents
 * Generate CRL for banned agents...
 *
 * =============================
 *
 * Attributes : /
 *
 * Methods :
 *		- initializeAgent(agentId, [callback])
 *		- generateCrl([callback])
 *
 * Events : /
 *
 * =============================
 */



/**
 * Load modules
 */

// Built-in
var fs = require('fs');
// Global
var logger = require('logger');
var utils = require('utils');
var Dao = require('db').Dao;
var config = require('config');
var dbCommander = require('dbCommander');



/**
 * Variables
 */

// DAO
var configDao = new Dao('config');
var installsDao = new Dao('installs');



/**
 * Create Agent private key and certificate and save
 * it in the DB.
 *
 * @param agentId the id of the agent for which generate the key/certificate
 * @param callback a function callend when the data are generated
 */

var initializeAgent = function (agentId, callback) {
	configDao.findOne({name: 'certificationAuthority'}, function (err, ca) {
		if (ca) {
			var parameters = {
				tmp_directory:	config.serviceTmpDir,
				password:		ca.private_key.passphrase,
				agent_id:		agentId,
				validity:		ca.crt_validity,
				cert_filename:	ca.certificate.filename,
				key_filename:	ca.private_key.filename
			};
			dbCommander.command('init-agent', parameters, function(result) {
				if (result.code == 0) {
					var split = result.data.split('-----END RSA PRIVATE KEY-----');
					var key = split[0] + '-----END RSA PRIVATE KEY-----';
					var cert = split[1];
					installsDao.update(agentId, {private_key: key, certificate: cert}, function (err, result) {
						if (!result || result !== 1) {
							if (callback) callback(new Error('[CA] Unable to update agent in DB'));
						} else {
							if (callback) callback(null);
						}
					});
				} else {
					if (callback) callback(new Error('[CA] Unable to create agent credentials: code = ' + result.code + ', output = ' + result.data));
				}
			});
		} else {
			if (callback) callback(new Error('[CA] No configuration found in database for the certification authority'));
		}
	});
};



/**
 * Generate a CRL from the database agents.
 * Get all the banned agents, and generate a CRL
 * with the serial numbers of their certificates.
 *
 * @param callback function called when the CRL is generated
 */

var generateCrl = function (callback) {
	installsDao.find({status: 'banned'}, function (installs) {
		if (installs) {
			var index = '';
			for (var key in installs) {
				var i = installs[key];
				index += 'R\t' + _format(new Date(1392852520000)) + 'Z\t' + _format(new Date(i.banDate)) + 'Z\t' + i._id + '\tunknown\tunknown\n';	// TODO Expiration date
			}
			configDao.findOne({name: 'certificationAuthority'}, function (err, ca) {
				if (ca) {
					var parameters = {
						tmp_directory:	config.serviceTmpDir,
						password:		ca.private_key.passphrase,
						validity:		ca.crt_validity,
						cert_filename:	ca.certificate.filename,
						key_filename:	ca.private_key.filename,
						index:			index
					};
					dbCommander.command('generate-crl', parameters, function (result) {
						configDao.update(ca._id, {'crl.contents' : result.data, 'crl.last_generation' : new Date().getTime()}, function (err, result) {
							if (!result || result !== 1) {
								if (callback) callback(new Error('[CA] Unable to update CRL in DB'));
							} else {
								logger.info('[CA] CRL generated: ' + result.data);
								if (callback) callback(null);
							}
						});
					});
				} else {
					if (callback) callback(new Error('[CA] No configuration found in database for the certification authority'));
				}
			});
		} else {
			if (callback) callback(new Error('[CA] Unable to find agents in database for the CRL'));
		}
	});
};



/**
 * Format a date object into the openssl index.txt
 * base format.
 * For example: 2014/25/5 22:10:48 -> 142505221048
 *
 * This method is synchronous.
 *
 * @param date a Date object
 * @return the date into the openssl index.txt base format
 */

var _format = function (date) {
	ret = '';
	// Year
	ret += date.getFullYear().toString().substring(2,4);
	// Month
	ret += (date.getMonth() + 1 < 10) ? '0' : '';
	ret += (date.getMonth() + 1);
	// Day
	ret += (date.getDate() < 10) ? '0' : '';
	ret += date.getDate();
	// Hours
	ret += (date.getHours() < 10) ? '0' : '';
	ret += date.getHours();
	// Minutes
	ret += (date.getMinutes() < 10) ? '0' : '';
	ret += date.getMinutes();
	// Seconds
	ret += (date.getSeconds() < 10) ? '0' : '';
	ret += date.getSeconds();
	// Return
	return ret;
};



/**
 * Exports
 */

// Methods
exports.initializeAgent = initializeAgent;
exports.generateCrl = generateCrl;