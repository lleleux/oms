/**
 * =============================
 *
 * API Express server
 * Set the route listening on, start/stop the server...
 *
 * =============================
 *
 * Attributes : /
 *
 * Methods :
 *		- start([callback])
 *		- stop([callback])
 *
 * Events : /
 *
 * =============================
 */



/**
 * Load modules
 */

// Built-in
var express = require('express');
// Global
var logger = require('logger');
var config = require('config');
// Custom
var devices = require('../routes/devices.js');
var installs = require('../routes/installs.js');


/**
 * Variables
 */

// Server
var server = express();
// Host/port
var host = config.host;
var port = config.port;


/**
 * Configure server:
 * 		- use logger
 *		- allow cross-domain
 */

var _configureServer = function () {
	var allowCrossDomain = function(req, res, next) {
		// Send headers
		res.header('Access-Control-Allow-Origin', '*');
		res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');
		res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, Content-Length, X-Requested-With');
		// Intercept OPTIONS method
		if ('OPTIONS' == req.method) {
			res.send(200);
		} else {
			next();
		}
	};

	server.configure(function () {
		server.use(express.logger('dev'));
		server.use(allowCrossDomain);
		server.use(express.bodyParser());
	});
};



/**
 * Configure server routes
 */

var _configureRoutes = function () {
	// Devices
	server.get('/device', devices.findAll);
	server.get('/device/:id', devices.findById);
	server.post('/device', devices.insert);
	server.put('/device/:id', devices.update);
	server.delete('/device/:id', devices.remove);
	server.post('/device/:id/command/:name', devices.execute);

	// Installations
	server.get('/install', installs.findAll);
	server.get('/install/:id', installs.findById);
	server.post('/install', installs.insert);
	server.put('/install/:id', installs.update);
	server.delete('/install/:id', installs.remove);
	server.post('/install/:id/accept', installs.accept);
	server.post('/install/:id/reject', installs.reject);
};



/**
 * Start the API Server
 *
 * @param callback function called when the web server is listening
 */

var start = function (callback) {
	_configureServer();
	_configureRoutes();
	server = server.listen(port, host, function () {
		logger.info('[Server] Web server listening on ' + host + ':' + port);
		if (callback) callback();
	});
};



/**
 * Stop the API Server
 *
 * @param callback function called when the web server is no more listening
 */

var stop = function (callback) {
	if (typeof server.close == 'function') {
		server.close(function () {
			logger.info('[Server] Web server no more listening on ' + host + ':' + port);
			if (callback) callback();
		});
	} else {
		logger.info('[Server] Cannot stop web server listening on ' + host + ':' + port);
		if (callback) callback();
	}
};



/**
 * Exports
 */

exports.start = start;
exports.stop = stop;