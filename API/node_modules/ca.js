/**
 * =============================
 *
 * Certification authority manager
 *
 * =============================
 *
 * Attributes : /
 *
 * Methods : /
 *
 * Events : /
 *
 * =============================
 */



/**
 * Load modules
 */

// Built-in
var fs = require('fs');
// Global
var logger = require('logger');
var utils = require('utils');
var Dao = require('db').Dao;
var config = require('config');
var dbCommander = require('dbCommander');



/**
 * Variables
 */

// DAO
var configDao = new Dao('config');
var installsDao = new Dao('installs');



/**
 * Create Agent private key and certificate
 */

var initializeAgent = function (agentId, callback) {
	configDao.findOne({name: 'certificationAuthority'}, function (ca) {
		var parameters = {
			tmp_directory:	config.get('tmpDir'),
			password:		ca.private_key.passphrase,
			agent_id:		agentId,
			validity:		ca.crt_validity,
			cert_filename:	ca.certificate.filename,
			key_filename:	ca.private_key.filename
		};
		dbCommander.command('init-agent', parameters, function(result) {
			if (result.code == 0) {
				var split = result.data.split('-----END RSA PRIVATE KEY-----');
				var key = split[0] + '-----END RSA PRIVATE KEY-----';
				var cert = split[1];
				installsDao.update(agentId, {private_key: key, certificate: cert}, callback);
			} else {
				logger.warn('[CA] Unable to create agent credentials: code = ' + result.code + ', output = ' + result.data)
			}
		});
	});
};



/**
 * Ban agent by setting his certificate in the CRL
 * Generate the new crl.
 *
 * Only works with "installed" and "created" agents.
 */

var banAgent = function (agentId, callback) {
	logger.info('[CA] Ban the agent: ' + agentId);
	// Get the CA infos
	configDao.findOne({name: 'certificationAuthority'}, function (ca) {
		var parameters = {
			ca_directory:	ca.directory,
			password:		ca.private_key.passphrase,
			agent_id:		agentId
		};
		dbCommander.command('revoke', parameters, function (result) {
			if (result.code === 0) {
				configDao.update(ca.id, {crl: {last_generation: new Date().getTime()}}, callback);
			}
		});
	});
};



/**
 * Exports
 */

// Methods
exports.initializeAgent = initializeAgent;
exports.banAgent = banAgent;