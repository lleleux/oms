/**
 * =============================
 *
 * Manages the GUI of the application.
 *
 * Create a webserver and a socket IO server.
 *
 * =============================
 *
 * Attributes : /
 *
 * Methods :
 * 		- start
 * 		- stop
 *
 * Events :
 * 		- connected
 * 		- disconnected
 * 		- stopped
 * 		- message(data)
 *
 * =============================
 */



/**
 * Load modules
 */
var logger = require('logger');
var fs = require('fs');
var http = require('http');
var io = require('socket.io');
var config = require('config');



/**
 * Variables
 */

// GUI host/port
var host = config.get('host');
var port = config.get('port');

// Pre-loaded frequently-user web-pages
var index = fs.readFileSync(__dirname + '/../frontend/index.html');



/**
 * Initialize the WebServer
 */

var server = http.createServer(function(req, res) {
	if (req.url == '/') {
		req.url = '/index.html';
	}
	fs.readFile(__dirname + '/../frontend' + req.url, function (err, data) {
		if (err) {
			res.writeHead(404);
			res.write(index);
		} else {
			res.writeHead(200);
			res.write(data);
		}
		res.end();
	});
});



/**
 * Set the WebServer handlers
 */

server.on('close', function() {
	logger.info('[GUI] GUI stopped');
});

server.on('listening', function() {
	logger.info('[GUI] GUI available at http://' + host + ':' + port + '/');
});



/**
 * Initialize Socket.io client socket
 */

var initClient = function(socket) {
	// TODO
};



/**
 * Public methods
 */

var start = function() {
	// Start webserver
	server.listen(port, host);

	// Socket IO
	io = io.listen(server, { log: false });
	io.set('log level', 1);

	// Socket IO handlers
	io.sockets.on('connection', function(socket) {
		initClient(socket);
	});
};

var stop = function(callback) {
	server.close(callback);
};



/**
 * Exports
 */

// methods
exports.start = start;
exports.stop = stop;