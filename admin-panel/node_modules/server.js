/**
 * =============================
 *
 * Manages the GUI of the application.
 *
 * Create a webserver and a socket IO server.
 *
 * =============================
 *
 * Attributes : /
 *
 * Methods :
 *		- start([callback])
 *		- stop([callback])
 *
 * Events : /
 *
 * =============================
 */



/**
 * Load modules
 */

// Built-in
var fs = require('fs');
var express = require('express');
var io = require('socket.io');
// Global
var logger = require('logger');
var config = require('config');
var installerGenerator = require('installerGenerator');
var db = require('db');



/**
 * Variables
 */

// Server
var server = express();
// Host/port
var host = config.host;
var port = config.port;
// Pre-loaded frequently-user web-pages
var index = fs.readFileSync(__dirname + '/../frontend/index.html');
// DAO
var serverDao = new db.Dao('servers');


/**
 * Configure server:
 * 		- use logger
 *		- allow cross-domain
 *		- set static files routes
 *		- default route to index
 */

var _configureServer = function () {
	// Logging
	server.use(express.logger('dev'));
	server.use(express.bodyParser());
	// Templating
	server.get('/js/app.js', function(req, res) {
		// Look for first registered oms-api in DB
		var query = {};
		query['services.oms-api'] = {$exists: true};
		serverDao.findOne(query, function (err, server) {
			if (server) {
				config.get(server.hostname, 'oms-api', function (err, serverConfig) {
					var contents = fs.readFileSync(__dirname + '/../frontend/js/app.js').toString();
					var hostname = serverConfig.publicHost ? serverConfig.publicHost : serverConfig.server;
					contents = contents.replace(/{{hostname}}/g, hostname);
					contents = contents.replace(/{{port}}/g, serverConfig.port);
					res.set('Content-Type', 'application/javascript');
					res.send(contents);
				});
			} else {
				res.send(404);
				// TODO no API installed...
			}
		});
	});
	// Static JS/Images...
	server.use(express.static(__dirname + '/../frontend'));
	// Static intallers files
	server.use('/files/installers', express.static(config.serviceTmpDir + config.installersDir));
	// Default route
	server.use(function(req, res, next) {
		res.set('Content-Type', 'text/html');
		res.send(index);
	});
};



/**
 * Initialize Socket.io client socket
 */

var initClient = function (socket) {
	socket.on('getInstaller', function (data) {
		// If the installer exists
		if (fs.existsSync(config.serviceTmpDir + config.installersDir + data.agentId + '.deb')) {
			socket.emit('installer', data.agentId);
		}
		// Generate an installer
		else {
			socket.emit('generatingInstaller', data.agentId);
			installerGenerator.generateAgent(data.agentId, function (err) {
				if (err) {
					logger.error('[GUI] Unable to generate installer for agent ' + data.agentId + ': ' + err.message);
				} else {
					socket.emit('installer', data.agentId);
				}
			});
		}
	});
};



/**
 * Start the GUI server
 *
 * @param callback function called when the web server is listening
 */

var start = function (callback) {
	// Configure
	_configureServer();

	// Start webserver
	server = server.listen(port, host, function () {
		logger.info('[Server] Web server listening on ' + host + ':' + port);
		if (callback) callback();
	});

	// Socket IO
	io = io.listen(server, { log: false });
	io.set('log level', 1);

	// Socket IO handlers
	io.sockets.on('connection', function (socket) {
		initClient(socket);
	});
};



/**
 * Stop the GUI server
 *
 * @param callback function called when the web server is no more listening
 */

var stop = function(callback) {
	if (typeof server.close == 'function') {
		server.close(function () {
			logger.info('[Server] Web server no more listening on ' + host + ':' + port);
			if (callback) callback();
		});
	} else {
		logger.info('[Server] Cannot stop web server listening on ' + host + ':' + port);
		if (callback) callback();
	}};



/**
 * Exports
 */

// methods
exports.start = start;
exports.stop = stop;