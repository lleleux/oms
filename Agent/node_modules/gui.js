/**
 * =============================
 * 
 * Manages the GUI of the application.
 *
 * Create a webserver and a socket IO server.
 * 
 * =============================
 * 
 * Attributes : /
 *
 * Methods :
 *		- start
 *		- stop
 * 
 * Events :
 *		- connected
 *		- disconnected
 *		- stopped
 *		- message(data)
 * 
 * =============================
 */



/**
 * Load modules
 */

// Built-in
var fs = require('fs');
var http = require('http');
var io = require('socket.io');
// Global
var logger = require('logger');
var config = require('config');
// Custom
var connection = require('connection');
var model = require('model');



/**
 * Variables
 */

// GUI port
var port = config.get('guiPort');

// Pre-loaded frequently-user web-pages
var error404 = fs.readFileSync(__dirname + '/../frontend/404.html');



/**
 * Initialize the WebServer
 */

var server = http.createServer(function (req, res) {
	if (req.url === '/') {
		req.url = '/index.html';
	}
	fs.readFile(__dirname + '/../frontend' + req.url, function (err, data) {
		if (err) {
			res.writeHead(404);
			res.write(error404);
		} else {
			res.writeHead(200);
			res.write(data);
		}
		res.end();
	});
});

server.on('close', function () {
	logger.info('[GUI] GUI stopped');

});

server.on('listening', function () {
	logger.info('[GUI] GUI available at http://127.0.0.1:8080/');

});



/**
 * Initialize Socket.io client socket
 */

var initClient = function (socket) {
	// Set listeners
	socket.on('stopAgent', function (socket) {
		connection.disconnect();
	});
	socket.on('startAgent', function (socket) {
		connection.connect();
	});
	socket.on('restartAgent', function (socket) {
		connection.disconnect();
		connection.connect();
	});
	// Send first update
	socket.emit('update', JSON.stringify(model.data));
};



/**
 * Public methods
 */

var start = function () {
	// Start webserver
	server.listen(port);

	// Socket IO
	io = io.listen(server, { log: false });
	io.set('log level', 1);

	// Socket IO handlers
	io.sockets.on('connection', function (socket) {
		initClient(socket);
	});

	// Listen on model
	model.on('update', function () {
		io.sockets.emit('update', JSON.stringify(model.data));
	});
};

var stop = function () {
	server.close();
	io.server.close();
};



/**
 * Exports
 */

// methods
exports.start = start;
exports.stop = stop;